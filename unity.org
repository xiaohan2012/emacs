* about

  just for Unity related configurations, keep it secret

* wish list

- [X] copy s2c-datagen command clipboard
- [X] run s2c-datagen in a separate shell
- [X] interactively accept uri for gsutil ls
- [ ] ls buckets for config file
  - input bucket
  - output bucket
- [ ] gsutil ls post actions depending on file types:
  - e.g., for json, pretty-print-buffer and then javascript mode
  - for yaml, yaml-mode
- [ ] separate shell opening/exit and training commands submission in unity/submit-s2c-train-jobs
  - 
* utility

** buffer

#+begin_src emacs-lisp
  (defun get-or-create-named-buffer (name)
    "return a buffer with 'name', create it if it does not exist "
    (let ((buffer-or-nil (get-buffer name)))
      (if buffer-or-nil
	  buffer-or-nil
	(generate-new-buffer name)	
	)
      )
    )
#+end_src

#+RESULTS:
: get-or-create-named-buffer

** shell 
#+begin_src emacs-lisp
  (defun my/async-shell-command (command buffer-name)
    "execute command async and display the output and error message in a buffer named buffer-name"
    (let* ((output-buffer (get-or-create-named-buffer buffer-name)))
      (async-shell-command command output-buffer output-buffer)
      ))  

  ;; (my/async-shell-command "ls" "*ls-buffer*")
#+end_src

#+RESULTS:
: #<window 94 on *ls-buffer*>

* org config

** python

#+begin_src emacs-lisp
  (setq org-babel-python-command "/Users/hanxiao/code/mz-ds-deep-learning/cpi-model/.venv/bin/python")

#+end_src

#+RESULTS:
: /Users/hanxiao/code/mz-ds-deep-learning/cpi-model/.venv/bin/python

* file opening shortcuts  
** open note

  #+begin_src elisp
    (defun open-note ()
      (interactive)
      (find-file "/Users/hanxiao/code/mz-re-ml-new/reshap/notes.org"))
    (global-set-key (kbd "C-c o n") 'open-note)
  #+end_src

  #+RESULTS:
  : open-note  

** shortcut: open onboarding.org
   #+begin_src emacs-lisp
     (defun onboarding-org-visit ()
     "visit ~/docs/notes/onboarding.org"
     (interactive)
     (find-file "~/docs/notes/onboarding-ios.org"))
     (global-set-key (kbd "C-c o o") 'onboarding-org-visit)
   #+end_src

   #+RESULTS:
   : onboarding-org-visit

** open this org file


    #+begin_src elisp
    (defun open-unity-org ()
      (interactive)
      (find-file "~/.emacs.d/unity.org"))
    (global-set-key (kbd "C-c o u") 'open-unity-org)
  #+end_src

  #+RESULTS:
  : open-unity-org

** open settings file

   #+begin_src emacs-lisp

    (defun open-settings-file ()
      (interactive)
      (find-file "~/.emacs.d/unity.org"))
    (global-set-key (kbd "C-c o u") 'open-unity-org)   

   #+end_src
** open config file in prd

#+begin_src emacs-lisp
  (defun replace-in-string (what with in)
    (replace-regexp-in-string (regexp-quote what) with in nil 'literal))

  (defun unity/open-file-in-prd ()
    "based on the current config file in dev, open the mirroing file in prd"
    (interactive)
    (find-file
     (replace-in-string
      "/dev/"
      "/prd/"
      (buffer-file-name)
      ))
    )

(defun unity/open-file-in-dev ()
  "based on the current config file in prd, open the mirroing file in dev"
  (interactive)
  (find-file
   (replace-in-string
    "/prd/"
    "/dev/"
    (buffer-file-name)
    ))
  )  
#+end_src

* diff
** diff prd and dev configs in mz-re-ml

   #+begin_src emacs-lisp
     (defun diff-prd-dev-configs ()
       (interactive)
       (diff "/Users/hanxiao/code/mz-re-ml-new/cpi-model/configs/adx/dev/config_conversion_train_bhv.yaml"
	     "/Users/hanxiao/code/mz-re-ml-new/cpi-model/configs/adx/prd/config_conversion_train_bhv.yaml")
       )
   #+end_src

   #+RESULTS:
   : diff-prd-dev-configs

** diff on mz-ds-deep-learning

   #+begin_src emacs-lisp

     ; training configs
     (defun diff-advctx-prd-dev-configs ()
     (interactive)
     (diff "/Users/hanxiao/code/mz-ds-deep-learning/cpi-model/configs/dev/config_s2c_advctx.yaml"
	   "/Users/hanxiao/code/mz-ds-deep-learning/cpi-model/configs/prd/config_s2c_advctx.yaml")
     )

     (defun diff-bhv-prd-dev-configs ()
     (interactive)
     (diff "/Users/hanxiao/code/mz-ds-deep-learning/cpi-model/configs/dev/config_s2c_bhv.yaml"
	   "/Users/hanxiao/code/mz-ds-deep-learning/cpi-model/configs/prd/config_s2c_bhv.yaml")
     )


     (defun diff-ctx-prd-dev-configs ()
     (interactive)
     (diff "/Users/hanxiao/code/mz-ds-deep-learning/cpi-model/configs/dev/config_s2c_ctx.yaml"
	   "/Users/hanxiao/code/mz-ds-deep-learning/cpi-model/configs/prd/config_s2c_ctx.yaml")
     )

     ; serving  configs
     (defun diff-serving-ctx-prd-dev-configs ()
     (interactive)
     (diff "/Users/hanxiao/code/mz-ds-deep-learning/cpi-model/configs/dev/config_serving_ctx_ios14.5.yaml"
	   "/Users/hanxiao/code/mz-ds-deep-learning/cpi-model/configs/prd/config_serving_ctx_ios14.5.yaml")
     )

     (defun diff-serving-bhv-prd-dev-configs ()
     (interactive)
     (diff "/Users/hanxiao/code/mz-ds-deep-learning/cpi-model/configs/dev/config_serving_bhv_ios14.5.yaml"
	   "/Users/hanxiao/code/mz-ds-deep-learning/cpi-model/configs/prd/config_serving_bhv_ios14.5.yaml")
     )


     (defun diff-serving-advctx-prd-dev-configs ()
     (interactive)
     (diff "/Users/hanxiao/code/mz-ds-deep-learning/cpi-model/configs/dev/config_serving_advctx_ios14.5.yaml"
	   "/Users/hanxiao/code/mz-ds-deep-learning/cpi-model/configs/prd/config_serving_advctx_ios14.5.yaml")
     )
   #+end_src

   #+RESULTS:
   : diff-serving-advctx-prd-dev-configs
* git
** get and copy branch name

#+begin_src emacs-lisp
  (defun unity/get-and-copy-branch ()
    "submit a s2c training job to KF"
    (unity/ensure-top-level)
    (interactive)
    (let ((git-branch (completing-read "branch name to copy: " (magit-list-branch-names))))
      (kill-new git-branch)
      (message (format "\"%s\" copied" git-branch))
      )
    )
#+end_src

#+RESULTS:
: unity/get-and-copy-branch

(magit-list-branch-names)
* shell commands shortcut
** +agg datagen+

#+begin_src emacs-lisp
  (defun unity-agg-datagen (exp-name run-name)
    "Insert agglabels datagen command at the current position"
    (interactive (list (read-string "experiment name: " "han/agglabels")
		       (read-string "run name: " "agg-datagen")))
    (insert (format
	     "python kubeflow/pipelines/conv/skad_aggregated_labels_datagen.py --ds_env mlp_dev --experiment_name '%s' --run_name '%s'"
	     exp-name run-name)))
#+end_src

#+RESULTS:
: unity-agg-datagen

** +agg train+

#+begin_src emacs-lisp
  (defun unity-agg-train (model-type exp-name run-name)
    "Insert agglabels datagen command at the current position"
    (interactive (list
		  (read-string "model type: " "LR")
		  (read-string "experiment name: " "han/agglabels")
		  (read-string "run name: " "agg-train")))
    (insert (format
	     "python kubeflow/pipelines/conv/skad_aggregated_labels_train.py --ds_env mlp_dev --model_type '%s' --experiment_name '%s' --run_name '%s'"
	     model-type exp-name run-name)))
#+end_src

#+RESULTS:
: unity-agg-train

** global variables

#+begin_src emacs-lisp
  (defvar unity/model-types (list "bhv" "advctx") "the list of model types by traffic")
  ;; (setq unity/model-types (list "bhv" "advctx"))
#+end_src

#+RESULTS:
| bhv | advctx |

** google storage buckets

#+begin_src emacs-lisp
  (defun unity-agg-input-buckets ()
    "Insert insert gls command for input buckets for agglabels data"
    (interactive)
    (insert "gls gs://unity-ads-dd-ds-dev-prd-models/tfrecords/skad_aggregated_labels_han_test/v1b/"))

  (defun unity-s2c-input-buckets ()
    "Insert insert gls command for input buckets for s2c data"
    (interactive)
    (insert "gls gs://unity-ads-dd-ds-dev-prd-models/tfrecords/cpi_conversion/combined_data_s2c_v1e_test/"))  

  (defun unity-serving-buckets ()
    "Insert insert gls command for serving models uri"
    (interactive)
    (insert "gls gs://unity-ads-dd-ds-dev-prd-models/tf-models/serving"))  
#+end_src

#+RESULTS:
: unity-serving-buckets

** VM

#+begin_src emacs-lisp
  (defun unity/start-vm ()
    "start my VM "
    (interactive)
    (my/async-shell-command "cd ~/code/mz-ds-deep-learning; make start-dev-vm; " "*unity/vm*")
    )

  (defun unity/stop-vm ()
    "stop my VM "
    (interactive)
    (my/async-shell-command "cd ~/code/mz-ds-deep-learning; make stop-dev-vm; " "*unity/vm*")
    )
#+end_src

#+RESULTS:
: unity/stop-vm

** remote SSH commands
*** ensure a terminal is open

#+begin_src emacs-lisp
  (defvar unity/vm-hostname "hanxiao-dev-vm" "the hostname of my current dev VM")

  (defun get-ssh-buffer-name (hostname)
    "get the buffer name based on hostname"
    (format "*ssh %s*" hostname))

  (defun unity/vm-shell/get-buffer ()
    "get the buffer name of my vm shell" 
    (get-ssh-buffer-name unity/vm-hostname))

  (defun my/ensure-ssh-terminal (hostname)
    "if a ssh terminal for a specific hostname is not open, open one"
    (let* ((ssh-buffer-name (get-ssh-buffer-name hostname)))
      (when (not (get-buffer ssh-buffer-name))
	(ssh hostname)
	)
      ssh-buffer-name
      )
    )

  (defun unity/vm-shell/ensure-ssh-terminal ()
    "ensure that a ssh terminal is open for my vm"
    (interactive)
    (my/ensure-ssh-terminal unity/vm-hostname)
    )

  (defun unity/vm-shell/ensure-ssh-terminal-is-visible ()
    "ensure that the terminal for SSH is visisible in a window"
    (let ((ssh-buffer-name (unity/vm-shell/get-buffer)))
      (when (not (get-buffer-window ssh-buffer-name))
	(split-window-right)
	(other-window 1)
	(switch-to-buffer ssh-buffer-name)
	;; (other-window 1)
	)  
      )
    )
  (defun unity/vm-shell/pop-up ()
    "pop up the ssh shell in a window"
    (interactive)
    (unity/vm-shell/ensure-ssh-terminal-is-visible)
    )
#+end_src

#+RESULTS:
: unity/vm-shell/pop-up

*** send command to ssh buffer and execute


#+begin_src emacs-lisp
  (defun unity/vm-shell/send-string (string)
    "send a command string to execute on my VM machine shell
  (no need to append a newline)"
    (comint-send-string
     (get-ssh-buffer-name unity/vm-hostname)
     (format "%s\n" string))
    )
  ;; (unity/vm-shell/send-string "ls")
  ;; (unity/vm-shell/send-string "mkf")
#+end_src

#+RESULTS:
: unity/vm-shell/send-string


- open a ssh terminal if not created
- send a command 
** s2c train
*** helper functions
#+begin_src emacs-lisp
  (defvar exp-name "han/exps" "name of experiment")
  (defvar dev-ds-env "mlp_dev" "name of ds environment in dev mode")
  (defvar prd-ds-env "mlp_prd" "name of ds environment in prd mode")

  (defun unity/get-kubeflow-command (pipeline-name ds-env exp-name run-name)
    "get the command to submit a training job"  
    (format
     "python kubeflow/pipelines/conv/%s.py --ds_env %s --experiment_name %s --run_name %s"
     pipeline-name ds-env exp-name run-name))

  (defun unity/vm-shell/enter-kubeflow-shell ()
    "enter kubeflow shell in the VM"
    (unity/vm-shell/ensure-ssh-terminal)
    (unity/vm-shell/send-string "mkf")
    )

  (defun unity/vm-shell/exit-kubeflow-shell ()
    "exit kubeflow shell in the VM"
    (unity/vm-shell/ensure-ssh-terminal)
    (unity/vm-shell/send-string "exit")
    )

  (defun unity/ensure-top-level ()
    (setq default-directory "~/code/mz-ds-deep-learning"))
#+end_src

#+RESULTS:
: unity/ensure-top-level

*** command wrappers
- possible improvement:
  - [X] ds_env choose from two options
  - [X] reduce the amount of boiler plate code
    
#+begin_src emacs-lisp
  (defun unity/vm-shell/update-git-repository (branch-name)
    "update the branch under the current git repo"
    (unity/vm-shell/send-string "git fetch")
    (unity/vm-shell/send-string (format "git checkout %s" branch-name))
    (unity/vm-shell/send-string "git pull") ; git pull
    )

  (defun unity/submit-s2c-train-jobs-in-shell (&optional
					       git-branch-or-nil model-type-or-nil ds-env-or-nil exp-name-or-nil run-name-or-nil reps-or-nil)
    "submit s2c train jobs assuming kubeflow-shell is open"
    (let* ((git-branch (or git-branch-or-nil (completing-read "git branch: " (magit-list-branch-names))))
	   (model-type (or model-type-or-nil (completing-read "model type: " unity/model-types)))
	   (ds-env (or ds-env-or-nil (completing-read "ds_env: " (list dev-ds-env prd-ds-env) nil t dev-ds-env nil dev-ds-env)))
	   (exp-name (or exp-name-or-nil (read-string "experiment name: " "han/exps")))
	   (run-name (or run-name-or-nil (format (read-string "run name: " "s2c-train-%s-test") model-type)))
	   (reps (or reps-or-nil (read-number "number of repetitions: " 1)))
	   (command (unity/get-kubeflow-command (format "s2c_%s_train" model-type) ds-env exp-name run-name))
	   )
      ;;assuming the ssh terminal is open thus commands can be sent there directly
      (unity/vm-shell/send-string (format "git checkout %s" git-branch))
      (if (eq reps 1)
	  (unity/vm-shell/send-string command)
	(dotimes (i reps)
	  (unity/vm-shell/send-string "sleep 1")
	  (unity/vm-shell/send-string (format "%s-%d" command i))
	  )  
	)
      )
    )
  (defun unity/submit-s2c-train-jobs (&optional exit-kf-shell-or-nil update-repo-or-nil enter-kf-or-nil)
    "submit a s2c training job to KF"
    (interactive)
    (unity/vm-shell/ensure-ssh-terminal)
    (let* ((exit-kf-shell-p (or exit-kf-shell-or-nil nil))
	   (update-repo-p (or update-repo-or-nil t))
	   (enter-kf-p (or enter-kf-or-nil t))
	   )
      ;; show the ssh buffer if invisible
      (unity/vm-shell/ensure-ssh-terminal-is-visible)

      (unity/vm-shell/send-string (format "git checkout %s" git-branch))
      (when update-repo-p
	(unity/vm-shell/update-git-repository git-branch)
	)
      (when enter-kf-p
	(unity/vm-shell/enter-kubeflow-shell)
	)

      ;; call the job submission function, which asks for more inputs
      (unity/submit-s2c-train-jobs-in-shell)

      (when exit-kf-shell-p
	(unity/vm-shell/exit-kubeflow-shell))
      )
    )

  (defun unity/submit-s2c-train-jobs-for-all-model-types ()
    "submit the train jobs for all model types at once under a certain branch"
    (interactive)
    (let*
	(
	 (git-branch (completing-read "git branch: " (magit-list-branch-names)))
	 (ds-env (completing-read "ds_env: " (list dev-ds-env prd-ds-env) nil t dev-ds-env nil dev-ds-env))
	 (exp-name (read-string "experiment name: " "han/exps"))
	 (run-name-template (read-string "run name template: " "s2c-train-%s-test"))
	 (reps (read-number "number of repetitions: " 1))
	 (model-types unity/model-types))
      (unity/vm-shell/ensure-ssh-terminal-is-visible)

      (unity/vm-shell/update-git-repository git-branch)

      (unity/vm-shell/enter-kubeflow-shell)
      (dolist (model-type model-types)
	(let* ((run-name (format run-name-template model-type))
	       (command (unity/get-kubeflow-command (format "s2c_%s_train" model-type) ds-env exp-name run-name)))
	  (if (eq reps 1)
	      (unity/vm-shell/send-string command)
	    (dotimes (i reps)
	      (unity/vm-shell/send-string "sleep 1") ; to avoid trained models with the same time
	      (unity/vm-shell/send-string (format "%s-%d" command i))
	      )  
	    )
	  )
	)

      (unity/vm-shell/exit-kubeflow-shell)))

#+end_src

#+RESULTS:
: unity/submit-s2c-train-jobs-for-all-model-types

** c2i train
** s2c serving

#+begin_src emacs-lisp
  (defun unity/submit-s2c-serving-jobs ()
    "submit a s2c serving job to KF, e.g., python kubeflow/pipelines/conv/s2c_bhv_serving_only.py --ds_env mlp_dev 
  "
    (unity/ensure-top-level)
    (interactive)
    (let* ((git-branch (completing-read "git branch: " (magit-list-branch-names)))
	   (model-type (completing-read "model type: " unity/model-types))
	   (ds-env (completing-read "ds_env: " (list dev-ds-env prd-ds-env) nil t dev-ds-env nil dev-ds-env))
	   (exp-name (read-string "experiment name: " "han/exps"))
	   (run-name (format (read-string "run name: " "s2c-serve-%s-test") model-type))
	   (reps (read-number "number of repetitions: " 1))
	   (command (unity/get-kubeflow-command (format "s2c_%s_serving_only" model-type) ds-env exp-name run-name))         
	   )
      ;; show the ssh buffer if invisible
      (unity/vm-shell/ensure-ssh-terminal-is-visible)
      (unity/vm-shell/update-git-repository git-branch)
      (unity/vm-shell/enter-kubeflow-shell)
      (if (eq reps 1)
	  (unity/vm-shell/send-string command)
	(dotimes (i reps)
	  (unity/vm-shell/send-string "sleep 1")
	  (unity/vm-shell/send-string (format "%s-%d" command i))
	  )  
	)    
      (unity/vm-shell/exit-kubeflow-shell))
    )



    (defun unity/submit-s2c-serving-jobs-for-all-model-types ()
      "submit the serving jobs for all model types at once under a certain branch"
      (interactive)
      (let*
	  (
	   (git-branch (completing-read "git branch: " (magit-list-branch-names)))
	   (ds-env (completing-read "ds_env: " (list dev-ds-env prd-ds-env) nil t dev-ds-env nil dev-ds-env))
	   (exp-name (read-string "experiment name: " "han/exps"))
	   (run-name-template (read-string "run name template: " "s2c-train-%s-test"))
	   (reps (read-number "number of repetitions: " 1))
	   (model-types unity/model-types))
	(unity/vm-shell/ensure-ssh-terminal-is-visible)

	(unity/vm-shell/update-git-repository git-branch)

	(unity/vm-shell/enter-kubeflow-shell)
	(dolist (model-type model-types)
	  (let* ((run-name (format run-name-template model-type))
		 (command (unity/get-kubeflow-command (format "s2c_%s_serving_only" model-type) ds-env exp-name run-name)))
	    (if (eq reps 1)
		(unity/vm-shell/send-string command)
	      (dotimes (i reps)
		(unity/vm-shell/send-string "sleep 1") ; to avoid launching jobs at the same time
		(unity/vm-shell/send-string (format "%s-%d" command i))
		)  
	      )
	    )
	  )

	(unity/vm-shell/exit-kubeflow-shell)))
#+end_src

#+RESULTS:
: unity/submit-s2c-serving-jobs-for-all-model-types


** s2c datagen

#+begin_src emacs-lisp
  (defun unity/default-version ()
    (format-time-string "%Y-%m-%d 00" (current-time))
    )

  (defun unity-s2c-datagen (exp-name run-name version)
    "Insert s2c datagen command at the current position"
    (interactive (list (read-string "experiment name: " "han/exps")
		       (read-string "run name: " "s2c-datagen")
		       (read-string "version:" (unity/default-version))))
    (insert (format
	     "python kubeflow/pipelines/conv/s2c_combined_datagen.py --ds_env mlp_dev --experiment_name '%s' --run_name '%s' --version '%s'"
	     exp-name run-name version)))

#+end_src

** c2i datagen

#+begin_src emacs-lisp
  (defun unity-c2i-datagen (exp-name run-name)
    "Insert c2i datagen command at the current position"
    (interactive (list (read-string "experiment name: " "han/exps")
		       (read-string "run name: " "c2i-datagen")))
    (insert (format
	     "python kubeflow/pipelines/conv/c2i_skad_datagen_train.py --ds_env mlp_dev --experiment_name '%s' --run_name '%s'"
	     exp-name run-name)))

#+end_src


#+RESULTS:
: unity-c2i-datagen
* hyper-parameter tuning
#+begin_src emacs-lisp
  (defun unity/git-branch-name-from-hp-configs (base-name hp-configs)
    "get the name of a git branch from hp configurations
  (unity/git-branch-name-from-hp-configs \"base-branch\" '((\"batch_size\" 100000) (\"learning_rate\" 0.004))) -> base-branch/batch_size=100000,learning_rate=0.004
  "

    (concat
     base-name "-"
     (mapconcat (lambda (pair) (format "%s-%s" (car pair) (car (cdr pair)))) hp-configs "-")
     )
    )

  (defun unity/change-field-in-buffer (file-name field-name new-value)
    "change value under field-name to new-value"
    (let ((cur-buffer (current-buffer)))
      (with-current-buffer
	  cur-buffer  ;; does not work!
	(find-file file-name)
	(beginning-of-buffer)
	(search-forward (concat field-name ":"))
	(forward-char 1)  ;move beyond ":"
	(kill-line)
	(insert new-value)
	(save-buffer)
	(kill-this-buffer) ;; close the config file, to avoid inputtinf interactively from reloading files
	;; (message (format "updated to %s" (thing-at-point 'line t)))
	(set-buffer cur-buffer) ;; does not work!
	)
      )
    )

  ;; (unity/change-field-in-buffer (unity/get-s2c-train-dev-config-path "bhv") "n_iterations" "9999")

  (defun unity/update-hp-config-under-branch (config-file start-branch hp-configs)
    "create a new branch, make changes to training config, commit and push the changes to remote

  an example:

    (unity/update-hp-config-under-branch
     (unity/get-s2c-train-dev-config-path \"bhv\")
     \"3891-s2c-DC-tune-bhv\"
     '((\"batch_size\" \"9999\")))
  "
    (let*
	((branch-name (unity/git-branch-name-from-hp-configs start-branch hp-configs)))

      (print (format "unity-tune: branch name %s" branch-name))
      (when (not (member branch-name (magit-list-branch-names)))
	(print "create new branch")
	(magit-branch-create branch-name start-branch) ; create a new branch
	)    
      (print (format "unity-tune: check out %s" branch-name))
      (magit-branch-checkout branch-name)
      ;; ;; modify teh configs
      (print "unity-tune: make changes")
      (dolist (field-value-pair hp-configs)
	(unity/change-field-in-buffer config-file (nth 0 field-value-pair) (nth 1 field-value-pair))
	)
      (magit-run-git (list "add" config-file))
      (print "unity-tune: commit and push")
      (magit-run-git '("commit" "-m" "updated hyperparameters")) ; commit it
      (magit-run-git (list "push" "--set-upstream" "origin" branch-name)) ; commit it
      )
    ) 


  (defun unity/get-tune-branch-name (start-branch model-type)
    (concat start-branch "-" model-type)
    )
  (defun unity/update-hp-config-for-model-type  (model-type start-branch hp-configs)
    "create a new branch for hp config update for a given model type
  an example: (unity/update-hp-config-for-model-type \"advctx\" \"3891-s2c-DC-tune\" '((\"batch_size\" 10000)))"
    (interactive)
    (let* ( (new-branch-name (unity/get-tune-branch-name start-branch model-type)))
      (when (not (member new-branch-name (magit-list-branch-names)))
	(message (format "create new branch %s" new-branch-name))
	(magit-branch-create new-branch-name start-branch) ; create a new branch
	) 
      (unity/update-hp-config-under-branch
       (unity/get-s2c-train-dev-config-path model-type)
       new-branch-name
       hp-configs)
      )  
    )
#+end_src


#+RESULTS:
: unity/update-hp-config-for-model-type

* gsutil
** ls URI interactively

#+begin_src emacs-lisp
  (defvar gsutil/buffer-name "*unity/gsutil/results*" "buffer name to display gsutil execution results")


  (defun gsutil/execute (command)
    "execute a gsutil command and show results in another buffer"
    (my/async-shell-command command gsutil/buffer-name)
    )

  (defun gsutil/ls (&optional uri-or-nil)
    "run gsutil ls URI in and show results in another buffer"
    (interactive)
    (let
	((uri (or uri-or-nil (read-string "uri: " ""))))
      (gsutil/execute (format "gsutil ls %s" uri))
      )
    )
#+end_src

#+RESULTS:
: gsutil/ls

** ls URI at point
gs://unity-ads-dd-ds-prd-models/tfrecords/cpi_conversion/combined_data_s2c_v1e

#+begin_src emacs-lisp
  (defun unity/gls-uri (uri)
    (cond
     ;; perhaps apply prettify the string and use javascript-mode
     ((or (s-suffix? ".json" uri) (s-suffix? ".yaml" uri)) (gsutil/execute (format "gsutil cat %s" uri)))
     (t (gsutil/execute (format "gsutil ls %s" uri)))
     )
    )
  (defun unity/gls-at-point ()
    (interactive)
    (let ((uri (path-at-point)))
      (unity/gls-uri uri)
      )
    )
#+end_src

#+RESULTS:
: unity/gls-at-point

** TODO ls data output dir for a given file

todo:

- [X] define variable for buffer-name
- [X] get output-dir
- [X] get name
- [ ] save-excursion does not work
  
#+begin_src emacs-lisp
  (defun unity/get-field-value-in-datagen-config (config-path field-name)
    (save-excursion
      (find-file config-path)
      (beginning-of-buffer)
      (search-forward field-name)
      (forward-char 1)
      (path-at-point)
      )
    )

  (defun unity/gls-datagen-output-bucket ()
    (interactive)
    (let* (
	   (ds-env (completing-read "ds_env:" (list "dev" "prd")))
	   (config-file-path (format "/Users/hanxiao/code/mz-ds-deep-learning/cpi-datagen/configs/%s/s2c_combined.yaml" ds-env))
	   (output-dir (unity/get-field-value-in-datagen-config config-file-path "output_dir:"))
	   (name (unity/get-field-value-in-datagen-config config-file-path "name:")))
      (gsutil/ls (format "%s/%s"  output-dir name))
      )
    )

  ;; (unity/gsutil-ls-output-bucket-for-file)
#+end_src

#+RESULTS:
: unity/gls-datagen-output-bucket

** DONE define gs as new link type in org
gs://unity-ads-dd-ds-prd-models/tfrecords/cpi_conversion/combined_data_s2c_v1e

#+begin_src emacs-lisp
  (require 'ol)

  (org-link-set-parameters "gs"
			   :follow #'org-gs-open
			   ;; :export #'org-gs-export
			   ;; :store #'org-gs-store-link
			   )

  (defcustom org-gs-command 'gs
    "The Emacs command to be used to display a gs link."
    :group 'org-link
    :type '(choice (const man) (const woman)))

					  ; the extracted path by org omits gs:, therefore invalid
					  ; FIX this!
  (defun org-gs-open (_)
    "ls path at point in GCS."
    (unity/gls-at-point))

  ;; (defun org-gs-store-link (link &optional _)
  ;;   "not implemented yet"
  ;;   (unity/gls-at-point)
  ;;   )


  ;; (defun org-gs-export (link description format _)
  ;;   "not implemented yet"
  ;;   (unity/gls-at-point)
  ;;   )

  ;; (provide ol-gs)
#+end_src

#+RESULTS:
: org-gs-open

** define gs as a new link type in YAML (or globally) ()
* config update
** train config: toggle between debug mode and full mode
*** helper functions
#+begin_src emacs-lisp
  (defun buffer-contains-substring (string)
    "return t if the current buffer contains string"
    (save-excursion
      (save-match-data
	(goto-char (point-min))
	(search-forward string nil t))))

  (defun quick-replace (regexp new-text)
    "replace all occurences of regexp by new-text"
    (beginning-of-buffer)
    (while (re-search-forward regexp nil t)
      (replace-match new-text)
      )

  )

  (defun unity/replace-field-in-buffer (field old new)
    "replace a field's value (of old) by new"
    (quick-replace   (concat field ": " old)   (concat field ": " new))
    )
#+end_src

#+RESULTS:
: unity/replace-field-in-buffer

*** main functions

#+begin_src emacs-lisp
  (defun unity/config-train-to-full ()
    "config the training to be full by changing the values of a few fields"
    (interactive)
    (save-excursion
      (unity/replace-field-in-buffer "n_iterations" "2" "40")
      (unity/replace-field-in-buffer "val_loss_limit" "0.9" "0.11")
      (unity/replace-field-in-buffer "limited_data" "true" "false")
      )
    )


  (defun unity/config-train-to-debug ()
    "config the training to be debug by changing the values of a few fields"
    (interactive)
    (save-excursion
      (unity/replace-field-in-buffer "n_iterations" "40" "2")
      (unity/replace-field-in-buffer "val_loss_limit" "0.11" "0.9")
      (unity/replace-field-in-buffer "limited_data" "false" "true")    
      )
    )

  (defun unity/toggle-train-config ()
  "alternate the config  between debug and full training mode"
  (interactive)
  (if (buffer-contains-substring "n_iterations: 2")
      (unity/config-train-to-full) ; in debug mode
    (unity/config-train-to-debug) ; in full mode
  ))

  (defvar unity/s2c-train-config-file-path-pattern "/Users/hanxiao/code/mz-ds-deep-learning/cpi-model/configs/dev/conversion/%s/s2c.yaml" "template of s2c train config path")

  (defun unity/get-s2c-train-dev-config-path (model-type)
    "return the path of training config path (in dev) for a model-type"
    (format unity/s2c-train-config-file-path-pattern model-type))

  (defun unity/toggle-train-config-for-model-type ()
    "toggle the training config file for a specific model type"
    (interactive)
    (let ((model-type (completing-read "model type: " unity/model-types)))
      (save-excursion
	(find-file (unity/get-s2c-train-dev-config-path model-type))
	(unity/toggle-train-config)
	)
      )
    )
#+end_src

#+RESULTS:
: unity/toggle-train-config-for-model-type

* Python/dev
** activating virtualenv under cpi-model

#+begin_src elisp
  (defun activate-cpi-model-virtualenv (directory)
    "pyenv-activate the virtual environment under cpi-model, e.g., './cpi-model/.venv'"
    (interactive (list (read-directory-name "directory name: " "~/code/mz-ds-deep-learning/cpi-model")))
    (message (format "activating virtuelenv under '%s'" directory))
    (pyvenv-activate
     (expand-file-name
      ".venv" directory))
    (setq elpy-rpc-virtualenv-path 'current)  ; set path to Python interpreter correctly
    )

  (global-set-key (kbd "C-c a c v") 'activate-cpi-model-virtualenv)
#+end_src

#+RESULTS:
: activate-cpi-model-virtualenv


* misc
** copy my Slack handle

#+begin_src emacs-lisp
  (defun unity/copy-my-slack-handle ()
    "copy my slack handle to clipboard"
    (interactive)
    (kill-new "<@U032B77FUFM>")
    )
#+end_src

#+RESULTS:
: unity/copy-my-slack-handle
** copy KF namespace

#+begin_src emacs-lisp
  (defun unity/copy-kf-service-account ()
    "copy KF service account to clipboard"
    (interactive)
    (kill-new "kubeflow-ads-cv")
    )
#+end_src

#+RESULTS:
: unity/copy-kf-service-account


