* random
* wish list

- [ ] LLM support: [[https://github.com/s-kostyaev/ellama][ellama]]
- [ ] [[https://github.com/zerolfx/copilot.el][copilot]]
- [-] latex
  - [X] use <TAB> to jump into the beginning of the next pair
  - [ ] delete enclosing command/macro, e.g., \pr{a + b} -> a + b    
  - [ ] fast latex input: https://karthinks.com/software/latex-input-for-impatient-scholars/
  - [ ] quickly open the latex buffer inside "$$" and avoid pressing "C-c ."
  - [ ] jump from left closing "$" to right closing "$" and vice versa
  - [ ] org-mode: when writing math, directly invoke the latex environment in a separate buffer
    - and when done, render the math
- python:
  - [ ] turn off flycheck in lsp (which is too alerting)
  - organize imports not working
  - faster import:
    - say I want to import a function in a file, how to do it without moving to that file, copy the function, and paste it
    - even without moving to the top of the target/importing file 
  - [ ] faster look up the correct import
    - say I want to import dataclass but I'm not sure what is the exact statement I should use
    - a quick workaround: use yasnippet
  - [ ] copy location of a function (which file, which module, etc)
- [ ] auto-completion in text mode with past frequency in mind
  - a starting point: https://develop.spacemacs.org/layers/+completion/auto-completion/README.html
  - or https://github.com/doomemacs/doomemacs
- [ ] [[https://emacsrocks.com/e16.html][dired-mode]]
- [ ] [[https://emacsrocks.com/e05.html][macros]]
- [ ] [[https://www.youtube.com/watch?v=D6h5dFyyUX0&ab_channel=emacsrocks][paedit]]: treat the code as a abstract syntax tree
- [ ] [[https://tony-zorman.com/posts/phd-workflow/2022-05-01-my-phd-workflow.html][a research workflow using emacs]]
- [-] elpy:
  - [X] code folding is not working (turn on the mode)
  - [ ] import package    
  - [ ] hungry delete not usable in elpy-mode?
  - [ ] in test: jump to error, or navigation in test output in general
  - [ ] key binding to yapf-fix-code
  - [ ] if a test passes, close the *compilation* buffer
  - [X] navigate by indentation
- [ ] conditional add symbols to electricmode
  - e.g., $ should be added when in Latex, while shouldn't be in for other modes
- [ ] [[ https://kristofferbalintona.me/posts/202206141852/#citar][citation in org]]
- [[https://umarahmad.xyz/blog/editing-remote-code-with-emacs/][remote development]]  
* good blogs on Emacs

- https://emacsrocks.com/
- 

* learning
** how to customize package variables -- use =setq=


- https://emacs.stackexchange.com/questions/44220/how-to-overwrite-a-defcustom-of-a-package-within-the-initfile
* setup
** environment variables

      #+begin_src emacs-lisp
	(setenv "PATH" (concat ":/usr/local/bin/" (getenv "PATH")))
	(add-to-list 'exec-path "/usr/local/bin/")

	(setenv "PATH" (concat ":/usr/bin/" (getenv "PATH")))
	(add-to-list 'exec-path "/usr/bin/")

	;; https://emacs.stackexchange.com/questions/10722/emacs-and-command-line-path-disagreements-on-osx
	;; (exec-path-from-shell-initialize)	;
   #+end_src

   #+RESULTS:
   : ((MANPATH . /Users/hanxiao/.nvm/versions/node/v18.16.1/share/man::/usr/share/man:/usr/local/share/man:) (PATH . /opt/homebrew/opt/postgresql@13/bin:/Users/hanxiao/.nvm/versions/node/v18.16.1/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/usr/bin/:/usr/local/bin//Users/hanxiao/code/upright-sagemaker-inference-api/src/predictors/pai-ghg-emissions/.venv/bin:/usr/local/bin/:/Library/TeX/texbin/:/Library/TeX/texbin//opt/homebrew/opt/postgresql@13/bin:/Users/hanxiao/.nvm/versions/node/v18.16.1/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin//opt/homebrew/bin:/Applications/Emacs.app/Contents/MacOS/bin-arm64-11:/Applications/Emacs.app/Contents/MacOS/libexec-arm64-11:/Users/hanxiao/.local/bin:/Users/hanxiao/.local/bin))

** exec-path-from-shell

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :init (when (memq window-system '(mac ns x))
	    (exec-path-from-shell-initialize))
    )
#+end_src

#+RESULTS:
** compat

#+begin_src emacs-lisp
  (use-package compat
    :ensure t)
#+end_src

#+RESULTS:

* package installers
** use-package

#+BEGIN_SRC emacs-lisp
(require 'package)


;; Adds the Melpa archive to the list of available repositories
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)

(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)

;; If there are no archived package contents, refresh them
(when (not package-archive-contents)
  (package-refresh-contents))

;; install 'use-package if not installed
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
#+END_SRC

#+RESULTS:

** quelpa

   #+begin_src emacs-lisp
     (use-package quelpa
       :ensure t)
   #+end_src

   #+RESULTS:

* appearance
** theme

#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :ensure t
    )

  (use-package organic-green-theme
    :ensure t
    )  

#+END_SRC

#+RESULTS:



** cursor
*** beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC

#+RESULTS:

*** cursor type
#+begin_src emacs-lisp
  (setq-default cursor-type 'bar)
  (set-cursor-color "#fdda9a")
#+end_src

#+RESULTS:

** rainbow-delimiters

   coloring parenthesis by their levels

   #+BEGIN_SRC emacs-lisp
	     (use-package rainbow-delimiters
	     :ensure t
	     :init
	     (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
	     (add-hook 'LaTeX-mode-hook #'rainbow-delimiters-mode))

	  ; or (rainbow-delimiters-mode 1) for global mode
   #+END_SRC

** rainbow

#+BEGIN_SRC emacs-lisp

(use-package rainbow-mode
:ensure t
:init (rainbow-mode 1))
#+END_SRC

** emoj

   #+begin_src emacs-lisp
     (use-package emojify
       :ensure t
       :hook (after-init . global-emojify-mode))
   #+end_src

   #+RESULTS:
   | global-emojify-mode | global-company-mode | #[0 \300 \207 [dashboard-insert-startupify-lists] 1] | tramp-register-archive-file-name-handler |

** fonts

   #+begin_src emacs-lisp
     (set-face-attribute 'default nil :height 150)
   #+end_src

   #+RESULTS:

** marked region

#+begin_src emacs-lisp
(set-face-attribute 'region nil :background "#666")
#+end_src

#+RESULTS:

** mode line
** spaceline

#+begin_src emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+end_src

** diminish

#+begin_src emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'hungry-delete-mode)
    (diminish 'which-key-mode)
    (diminish 'rainbow-mode)
    (diminish 'beacon-mode)
    (diminish 'subword-mode)
    (diminish 'smartparens-mode)
    (diminish 'lsp-lens-mode)
    (diminish 'auto-revert-mode)
    :hook
    (lsp-mode . (lambda ()
		  (diminish 'lsp-lens-mode)
		  (diminish 'lsp-mode "LSP")
		  (diminish 'projectile-mode "projt")
		  (diminish 'smartparens-mode)
		  (diminish 'auto-revert-mode)
		  ))
    )
#+end_src

#+RESULTS:

** scrolling

#+begin_src emacs-lisp
  ;; (pixel-scroll-precision-mode)
  ;; (setq mouse-wheel-scroll-amount '(0.1))
  ;; (setq mouse-wheel-progressive-speed nil)
  ;; (setq ring-bell-function 'ignore)
#+end_src

#+RESULTS:
: ignore




#+begin_src emacs-lisp
  (use-package good-scroll
    :ensure t
    :config (good-scroll-mode)
    )
#+end_src

#+RESULTS:
: t

* dashboard

#+begin_src emacs-lisp
  (use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-items '((projects . 10)
			  (recents . 5)))
  (setq dashboard-banner-logo-title "Hello Han."))
#+end_src

#+RESULTS:
: t

* auto completion
** company

#+begin_src emacs-lisp
  (use-package company
  :ensure t
  :hook
  (LaTeX-mode . company-mode)
  (emacs-lisp-mode . company-mode)
  :bind
  (:map company-active-map ("<tab>" . company-complete-selection))

  )

  ;; (add-hook 'LaTeX-mode-hook 'my/latex-buffer-setup)
#+end_src

#+RESULTS:
: company-complete-selection

should we use =auto-complete-mode=? the recommendation seems to be quite limited.



#+RESULTS
** +corfu+

it is a wrapper, which provides the UI of auto completion. the actual completion engine is determined by the mode

#+begin_src emacs-lisp
  ;; (use-package corfu
  ;;   :ensure t
  ;;   ;; Optional customizations
  ;;   :custom
  ;;   (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  ;;   (corfu-auto t)                 ;; Enable auto completion
  ;;   ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;;   ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;;   ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;;   ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;;   ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
  ;;   ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;;   ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
  ;;   ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;;   ;; Enable Corfu only for certain modes.
  ;;   ;; :hook ((prog-mode . corfu-mode)
  ;;   ;;        (shell-mode . corfu-mode)
  ;;   ;;        (eshell-mode . corfu-mode))

  ;;   ;; Recommended: Enable Corfu globally.
  ;;   ;; This is recommended since Dabbrev can be used globally (M-/).
  ;;   ;; See also `corfu-excluded-modes'.
  ;;   :init
  ;;   ;; (global-corfu-mode) ;; disable it for nowy
  ;;   )

  ;; ;; A few more useful configurations...
  ;; (use-package emacs
  ;;   :init
  ;;   ;; TAB cycle if there are only few candidates
  ;;   (setq completion-cycle-threshold 3)

  ;;   ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;;   ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;;   ;; (setq read-extended-command-predicate
  ;;   ;;       #'command-completion-default-include-p)

  ;;   ;; Enable indentation+completion using the TAB key.
  ;;   ;; `completion-at-point' is often bound to M-TAB.
  ;;   (setq tab-always-indent 'complete))
#+end_src

#+RESULTS:
** vertico (a vertical completion UI)

#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
		    (replace-regexp-in-string
		     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		     crm-separator)
		    (car args))
	    (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src

#+RESULTS:
** orderless

use space to separate the search terms

#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

#+RESULTS:
** marginalia (does not quite work with =M-x=)

adds annotation in minibuffer completions
#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    :ensure t
    ;; Either bind `marginalia-cycle' globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
	   :map minibuffer-local-map
	   ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+end_src

#+RESULTS:
: marginalia-cycle

** flyspell

#+begin_src emacs-lisp
  (use-package flyspell
    :config
    ;; (add-hook text-mode-hook (lambda () (flyspell-mode 1)))
    ; enable flycheck for certain modes
    (add-hook 'text-mode-hook (lambda () (flyspell-mode 1)))
    ;; (dolist (hook '(text-mode-hook))
    ;;   (add-hook hook (lambda () (flyspell-mode 1))))
    ; disable flycheck for certain mode
    (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
      (add-hook hook (lambda () (flyspell-mode -1))))
    )

#+end_src

#+RESULTS:
: t

*** tip: fix previous word automatically

  - call flyspell-auto-correct-previous-word with C-;
* general enhancement
** which-key

   shows what keys are possible given what you have already typed

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+END_SRC

#+RESULTS:

* org-mode
** basic
*** avoid opening a new window when editing a code snippet

#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window)
#+end_src

#+RESULTS:
: current-window
*** org table default size

#+begin_src emacs-lisp
(setq org-table-default-size "2x3")
#+end_src

#+RESULTS:
: 2x3

** org-bullets

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))

#+END_SRC

** text color
#+begin_src emacs-lisp
  ;; (use-package org-colored-text
  ;;   :ensure t)

  ;; Taken and adapted from org-colored-text
  (org-add-link-type
   "color"
   (lambda (path)
     "No follow action.")
   (lambda (color description backend)
     (cond
      ((eq backend 'latex)                  ; added by TL
       (format "{\\color{%s}%s}" color description)) ; added by TL
      ((eq backend 'html)
       (let ((rgb (assoc color color-name-rgb-alist))
             r g b)
         (if rgb
             (progn
               (setq r (* 255 (/ (nth 1 rgb) 65535.0))
                     g (* 255 (/ (nth 2 rgb) 65535.0))
                     b (* 255 (/ (nth 3 rgb) 65535.0)))
               (format "<span style=\"color: rgb(%s,%s,%s)\">%s</span>"
                       (truncate r) (truncate g) (truncate b)
                       (or description color)))
           (format "No Color RGB for %s" color)))))))

#+end_src

#+RESULTS:
: Created color link.

** some key bindings

   the default =C-c C-,= does not work for iTerm because it cannot send =C-,= to Emacs

   #+begin_src emacs-lisp
     ;; (define-key org-mode-map (kbd "C-c s") 'org-insert-structure-template)
   #+end_src
** hide sublevels

    #+begin_src emacs-lisp
      (defun org-hide-sublevels ()
	(interactive)
	(hide-sublevels 1))

      (global-set-key (kbd "C-c h s") 'org-hide-sublevels)


      ;; hide lists by default
      (setq org-cycle-include-plain-lists 'integrate)

      ;; hide all levels for default
      (setq org-startup-folded t)
    #+end_src

    #+RESULTS:
    : t
** programming language support

*** python

    #+begin_src emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages '((python . t)))
    #+end_src

    #+RESULTS:

** preview latex

   #+begin_src emacs-lisp
     ;; Making emacs find latex (so that C-c C-x C-l works on orgmode)
     ;; On MacOS
     (setenv "PATH" (concat ":/Library/TeX/texbin/" (getenv "PATH")))
     (add-to-list 'exec-path "/Library/TeX/texbin/")
   #+end_src

   #+RESULTS:
   | /Library/TeX/texbin/ | /Users/hanxiao/code/mz-ds-deep-learning/.venv/bin | /usr/bin | /bin | /usr/sbin | /sbin | /Applications/Emacs.app/Contents/MacOS/bin-x86_64-10_14 | /Applications/Emacs.app/Contents/MacOS/libexec-x86_64-10_14 | /Applications/Emacs.app/Contents/MacOS/libexec | /Applications/Emacs.app/Contents/MacOS/bin |

   increase font size

#+begin_src emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+end_src

#+RESULTS:
| :foreground | default | :background | default | :scale | 2.0 | :html-foreground | Black | :html-background | Transparent | :html-scale | 1.0 | :matchers | (begin $1 $ $$ \( \[) |

** load predefined Latex macros

- main idea:

  - create your own .sty file and place it under the appropriate directory

  - add your package name to org-latex-packages-alist

- useful commands to add your own .sty files

  #+begin_src shell
    less $(kpsewhich texmf.cnf)  # to see the relevant directories
    kpsewhich -var-value=TEXMFHOME  # print the value of $TEXMFHOME

    # create the directory to store your own .sty files
    mkdir -p "$(kpsewhich -var-value=TEXMFHOME)/tex/latex"  # which gives sth like /Users/hanxiao1/Library/texmf/tex/latex on my Mac

    # make sure Latex can find your .sty file
    kpsewhich {your-script}.sty
  #+end_src

  #+RESULTS:

- reference:

  - https://tex.stackexchange.com/questions/387843/where-do-i-place-my-own-sty-or-cls-files-to-make-them-available-to-all-my-te

  - https://orgmode.org/worg/org-tutorials/org-latex-preview.html


#+begin_src emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "han-macros" t))  ;; use t not nil
  ;; (print org-latex-packages-alist)
#+end_src

#+RESULTS:
|   | han-macros | t |

** remove latex images

#+begin_src emacs-lisp :results output
  (defun my/remove-latex-image-dir ()
    (interactive)
    (let ((dirname (concat
		    (file-name-directory (buffer-file-name))
		    "ltximg"
		    )))
      (if (file-directory-p dirname)
	  (progn
	    (delete-directory dirname t)
	    (message (format "%s deleted" dirname))
	    )
	(message (format "%s does not exist" dirname))
	)
      )
    )
#+end_src

#+RESULTS:

** image display

   #+begin_src emacs-lisp
     (setq org-image-actual-width nil)
     (pixel-scroll-mode t) ;; enable pixel scroll mode for better image viewing
   #+end_src

   #+RESULTS:
   : t

** org-journal for dairy keeping

#+begin_src emacs-lisp
  (use-package org-journal
    :ensure t
    :defer t
    :init
    ;; Change default prefix key; needs to be set before loading org-journal
    (setq org-journal-prefix-key "C-c j ")
    :config
    (setq org-journal-dir "~/org/journal/"
	  org-journal-date-format "%A, %d %B %Y"
	  org-journal-time-format "日记"))
#+end_src

#+RESULTS:
: t

** org-download

#+begin_src emacs-lisp
  (use-package org-download
    :ensure t
    :after org
    :defer nil
    :custom
    (org-download-method 'directory)
    (org-download-image-dir "images")
    (org-download-heading-lvl nil)
    (org-download-timestamp "%Y%m%d-%H%M%S_")
    ;; (org-image-actual-width 500)
    ;; (org-download-screenshot-method "/usr/local/bin/pngpaste %s")
    (org-download-screenshot-method "/opt/homebrew/bin/pngpaste %s")    
    :bind
    ("C-M-y" . org-download-screenshot)
    :config
    (require 'org-download))

#+end_src

#+RESULTS:
: org-download-screenshot

** valign (visual align)

#+begin_src emacs-lisp
  (use-package valign
    :ensure t
    :after org
    ;; :config   (add-hook 'org-mode-hook #'valign-mode)
    )

#+end_src

#+RESULTS:
** org-babel

enable executing shell scripts in code blocks

#+begin_src emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages
    '(
        (shell . t)
    )
)
#+end_src

#+RESULTS:

** todo keywords

#+begin_src emacs-lisp
  ;; does not work
  (use-package org
    :ensure t
    :init
    (setq org-todo-keywords
	  '((sequence "TODO" "DOING" "DONE")))
    (setq org-todo-keyword-faces
	  '(("TODO" . "red") ("DOING" . "cyan") ("DONE" . "green")))
    )
#+end_src

#+RESULTS:

** +citation+

#+begin_src emacs-lisp
  ;; (use-package oc-bibtex
  ;;   :ensure t)
#+end_src

#+RESULTS:
: t

* file
** save last edit place
#+begin_src emacs-lisp
(save-place-mode 1)
#+end_src

#+RESULTS:
: t

** copy path of current buffer

  #+begin_src emacs-lisp
    (defun my-put-file-name-on-clipboard ()
      "Put the current file name on the clipboard"
      (interactive)
      (let ((filename (if (equal major-mode 'dired-mode)
			  default-directory
			(buffer-file-name))))
	(when filename
	  (with-temp-buffer
	    (insert filename)
	    (clipboard-kill-region (point-min) (point-max)))
	  (message filename))))
  #+end_src

  #+RESULTS:
  : my-put-file-name-on-clipboard
** dired-subtree

   #+begin_src emacs-lisp
     (use-package dired-subtree
       :ensure t)
   #+end_src

   #+RESULTS:

** dired-filter

   #+begin_src emacs-lisp
     (use-package dired-filter
       :ensure t)
   #+end_src

   #+RESULTS:
** dired: omit certain file types

#+begin_src emacs-lisp
  (setq dired-omit-files
	(concat dired-omit-files "\\|^\\.ipynb_checkpoints$\\|^\\.pytest_cache$\\|^\\.venv$\\|^\\.git$\\|^\\_\\_pycache\\_\\_$"))
#+end_src



** neotree

   #+begin_src emacs-lisp
     (use-package neotree
       :ensure t
       :init
       (setq neo-window-width 30)
       )
   #+end_src

   #+RESULTS:

** open file at cursor

   #+begin_src emacs-lisp
     (defun my-open-file-at-cursor ()
       "Open the file path under cursor.
     If there is text selection, uses the text selection for path.
     If the path starts with “http://”, open the URL in browser.
     Input path can be {relative, full path, URL}.
     Path may have a trailing “:‹n›” that indicates line number, or “:‹n›:‹m›” with line and column number. If so, jump to that line number.
     If path does not have a file extension, automatically try with “.el” for elisp files.
     This command is similar to `find-file-at-point' but without prompting for confirmation.

     URL `http://xahlee.info/emacs/emacs/emacs_open_file_path_fast.html'
     Version 2020-10-17"
       (interactive)
       (let* (
	      ($inputStr
	       (if (use-region-p)
		   (buffer-substring-no-properties (region-beginning) (region-end))
		 (let ($p0 $p1 $p2
			   ;; chars that are likely to be delimiters of file path or url, e.g. whitespace, comma. The colon is a problem. cuz it's in url, but not in file name. Don't want to use just space as delimiter because path or url are often in brackets or quotes as in markdown or html
			   ($pathStops "^  \t\n\"`'‘’“”|[]{}「」<>〔〕〈〉《》【】〖〗«»‹›❮❯❬❭〘〙·。\\"))
		   (setq $p0 (point))
		   (skip-chars-backward $pathStops)
		   (setq $p1 (point))
		   (goto-char $p0)
		   (skip-chars-forward $pathStops)
		   (setq $p2 (point))
		   (goto-char $p0)
		   (buffer-substring-no-properties $p1 $p2))))
	      ($path
	       (replace-regexp-in-string
		"^file:///" "/"
		(replace-regexp-in-string
		 ":\\'" "" $inputStr))))
	 (if (string-match-p "\\`https?://" $path)
	     (if (fboundp 'xahsite-url-to-filepath)
		 (let (($x (xahsite-url-to-filepath $path)))
		   (if (string-match "^http" $x )
		       (browse-url $x)
		     (find-file $x)))
	       (progn (browse-url $path)))
	   (progn ; not starting “http://”
	     (if (string-match "#" $path )
		 (let (
		       ( $fpath (substring $path 0 (match-beginning 0)))
		       ( $fractPart (substring $path (1+ (match-beginning 0)))))
		   (if (file-exists-p $fpath)
		       (progn
			 (find-file $fpath)
			 (goto-char (point-min))
			 (search-forward $fractPart ))
		     (when (y-or-n-p (format "file no exist: 「%s」. Create?" $fpath))
		       (find-file $fpath))))
	       (if (string-match "^\\`\\(.+?\\):\\([0-9]+\\)\\(:[0-9]+\\)?\\'" $path)
		   (let (
			 ($fpath (match-string 1 $path))
			 ($line-num (string-to-number (match-string 2 $path))))
		     (if (file-exists-p $fpath)
			 (progn
			   (find-file $fpath)
			   (goto-char (point-min))
			   (forward-line (1- $line-num)))
		       (when (y-or-n-p (format "file no exist: 「%s」. Create?" $fpath))
			 (find-file $fpath))))
		 (if (file-exists-p $path)
		     (progn ; open f.ts instead of f.js
		       (let (($ext (file-name-extension $path))
			     ($fnamecore (file-name-sans-extension $path)))
			 (if (and (string-equal $ext "js")
				  (file-exists-p (concat $fnamecore ".ts")))
			     (find-file (concat $fnamecore ".ts"))
			   (find-file $path))))
		   (if (file-exists-p (concat $path ".el"))
		       (find-file (concat $path ".el"))
		     (when (y-or-n-p (format "file no exist: 「%s」. Create?" $path))
		       (find-file $path ))))))))))

     (global-set-key (kbd "C-c o f") 'my-open-file-at-cursor)
   #+end_src

   #+RESULTS:
   : my-open-file-at-cursor

* bookmarks
** useful commands

- C-x r l: list bookmarks
- C-x r b: jump to bookmark

** bookmark-view

   #+begin_src emacs-lisp
     (use-package bookmark-view
       :ensure t
       )
   #+end_src

   #+RESULTS:

* window
** +switch-window+

let's not use it for now since it works better for => 2= windows.

#+BEGIN_SRC emacs-lisp
  ;; (use-package switch-window

  ;;   :ensure t
  ;;   :init
  ;;   (global-set-key (kbd "C-x o") 'switch-window)
  ;;   (global-set-key (kbd "C-x 1") 'switch-window-then-maximize)
  ;;   (global-set-key (kbd "C-x 2") 'switch-window-then-split-below)
  ;;   (global-set-key (kbd "C-x 3") 'switch-window-then-split-right)
  ;;   (global-set-key (kbd "C-x 0") 'switch-window-then-delete)

  ;;   (global-set-key (kbd "C-x 4 d") 'switch-window-then-dired)
  ;;   (global-set-key (kbd "C-x 4 f") 'switch-window-then-find-file)
  ;;   (global-set-key (kbd "C-x 4 m") 'switch-window-then-compose-mail)
  ;;   (global-set-key (kbd "C-x 4 r") 'switch-window-then-find-file-read-only)

  ;;   (global-set-key (kbd "C-x 4 C-f") 'switch-window-then-find-file)
  ;;   (global-set-key (kbd "C-x 4 C-o") 'switch-window-then-display-buffer)

  ;;   (global-set-key (kbd "C-x 4 0") 'switch-window-then-kill-buffer))

  ;;   (setq switch-window-threshold 2)
  ;;   (setq switch-window-input-style 'minibuffer)
  ;;   (setq switch-window-shortcut-style 'qwerty)
#+END_SRC

#+RESULTS:
: qwerty

** ace-window

#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :config
    (global-set-key (kbd "C-M-o") 'ace-window)
    ;; update aw-ignored-buffers ignore certain buffers
    )

#+end_src

#+RESULTS:
: t

** window splitting and following

   #+begin_src emacs-lisp
   (defun split-window-and-follow-vertically ()
   (interactive)
   (split-window-below)
   (balance-windows)
   (other-window 1))
   (global-set-key (kbd "C-x 2") 'split-window-and-follow-vertically)

   (defun split-window-and-follow-horizontally ()
   (interactive)
   (split-window-right)
   (balance-windows)
   (other-window 1))
   (global-set-key (kbd "C-x 3") 'split-window-and-follow-horizontally)
   #+end_src

   #+RESULTS:

   #+end_src

* buffers
** ibuffer


   some goodies: use =p= and =n= to move up and down

 #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x C-b") 'ibuffer)
 #+END_SRC
** consult-buffer

#+BEGIN_SRC emacs-lisp
  ;; (global-set-key (kbd "C-x b") 'ido-switch-buffer)
  (global-set-key (kbd "C-x b") 'consult-buffer)
#+END_SRC
** expert mode

   do not ask for confirmation when killing buffers

#+BEGIN_SRC emacs-lisp
(setq ibuffer-expert t)
#+END_SRC

#+RESULTS:
: t
** kill current buffer and close the window

   #+begin_src emacs-lisp
	(defun kill-and-close-this-buffer ()
	  (interactive)
	  (kill-this-buffer)
	  (delete-window))

	(global-set-key (kbd "C-c k") 'kill-and-close-this-buffer)
   #+end_src

   #+RESULTS:
   : kill-and-close-this-buffer
** kill all buffers

   #+begin_src emacs-lisp
   (defun kill-all-buffers ()
   (interactive)
   (mapc 'kill-buffer (buffer-list)))
   (global-set-key (kbd "C-M-k") 'kill-all-buffers)
   #+end_src

   #+RESULTS:
   : kill-all-buffers

* projectile
** install
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1)
    )
#+END_SRC

#+RESULTS:
| (lambda nil (diminish 'projectile-mode projt) (diminish 'smartparens-mode) (diminish 'auto-revert-mode) (diminish 'lsp-lens-mode)) | yasnippet-snippets--fixed-indent | elpy-mode | (lambda nil (flycheck-mode -1)) | lsp | (lambda nil (diminish 'projectile-mode projt)) |

** set project type to python-pip

   #+begin_src emacs-lisp
     (defun projectile-project-type-to-python-pip ()
       (interactive)
       (setq projectile-project-type 'python-pip)
       )
     (global-set-key (kbd "C-c t p p") 'projectile-project-type-to-python-pip)

   #+end_src

   #+RESULTS:

* cursor
** avy

#+BEGIN_SRC emacs-lisp
(use-package avy
:ensure t
:bind
("M-s" . avy-goto-char-timer))
#+END_SRC

#+RESULTS:
: avy-goto-char

** multicursor
*** setup
#+begin_src emacs-lisp

  (use-package multiple-cursors
    :ensure t
    :bind
    ("C-M-j" . 'mc/mark-all-dwim)
    ("C-M-l" . 'mc/edit-lines)
    ("C-<" . 'mc/mark-previous-like-this)
    ("C->" . 'mc/mark-next-like-this)
    ;; ("C-M->" . 'mc/skip-to-next-like-this)
    ;; ("C-M-<" . 'mc/skip-to-previous-like-this)
    )
#+end_src

#+RESULTS:
: mc/mark-next-like-this

*** use cases
 
- code refactoring: change symbol name
- html editting

*** some tips
 
- =mc/mark-all-dwim=: "smart" way of marking
  - for both marked and unmarkd region
  - when unmarked, it will guess which regions to mark and add a cursor to each guessed region
  - when in marked region, it will ask for the text to seatch for
  - or when a short text is marked, mc will search for all occurrences of it
  - hit twice to mark even more
- =mc/edit-lines=: mark a region first and edit continuous lines

** goto-chg

#+begin_src emacs-lisp
  (use-package goto-chg
    :ensure t
    :bind
    ("C-c C-g" . 'goto-last-change))
#+end_src

#+RESULTS:
: goto-last-change

* programming
** lsp-mode

- use "S-l" to start exploring the lsp commands
  
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands lsp
    :hook
    ((python-mode . (lambda ()
                      (lsp-mode 1)
                      (flycheck-mode nil)  ;; does not turn off
                      ))
     (lsp-mode . lsp-enable-which-key-integration)
     )
    :config
    (setq lsp-idle-delay 0.5
          lsp-enable-symbol-highlighting t
          lsp-enable-snippet nil  ;; Not supported by company capf, which is the recommended company backend
          lsp-pyls-plugins-pycodestyle-enabled nil
          lsp-pyls-plugins-flake8-enabled nil ;; use flake8
          lsp-pyls-plugins-flake8-ignore  nil
          lsp-diagnostics-provider nil  ;; do not use any provider, but flake8
          ) 
    ;; how to use the plugins?
    (lsp-register-custom-settings
     '(("pyls.plugins.pyls_mypy.enabled" t t)
       ("pyls.plugins.pyls_mypy.live_mode" nil t)
       ("pyls.plugins.pyls_black.enabled" t t)
       ("pyls.plugins.pyls_isort.enabled" t t)))
    )



  ;; clangd is used by default
  (when (executable-find "clangd")
    (add-hook 'c++-mode-hook #'lsp))


  ;; do not use it, it is slow
  ;; (use-package lsp-ui
  ;;   :ensure t
  ;;   ;; :commands lsp-ui-mode
  ;;   )

  ;; (use-package ccls
  ;;   :ensure t
  ;;   :hook ((c-mode c++-mode objc-mode cuda-mode) .
  ;; 	 (lambda () (require 'ccls) (lsp))))
#+end_src

#+RESULTS:
** lsp-treemacs

#+begin_src emacs-lisp
  (use-package lsp-treemacs  
    :ensure t
    :config
    (lsp-treemacs-sync-mode 1))

  (defun my/goto-treemacs ()
    "goto treemacs window, create one if it is not there"
    (window-list)
    ;; (print (get-buffer-window-list "Treemacs"))
    )

  ;; (my/goto-treemacs)
#+end_src

tips:
- lsp-treemacs-errors-list: list error in a tree
- lsp-treemacs-symbols: display the symbols
- lsp-treemacs-references: display references at current point
- lsp-treemacs-call-hierarchy: display the call hierarchy
- inside treemacs: press "?" to show the help

** Python
*** activate virtualenv

   #+begin_src emacs-lisp
     (defun activate-virtualenv ()
       "pyenv-activate the current directory + '.venv'
	 in the future, the name of virtualenv should be specified as input
	 "
       (interactive)
       (message "activating virtualenv")
       (pyvenv-activate
	(expand-file-name
	 ".venv" default-directory))
       (setq elpy-rpc-virtualenv-path 'current)  ; set path to Python interpreter correctly
       )

     (global-set-key (kbd "C-c a v") 'activate-virtualenv)
   #+end_src

   #+RESULTS:
   : activate-virtualenv

*** lsp-mode

- install the python language server using
  #+begin_src bash :results output
    pip install "python-lsp-server[all]"
  #+end_src
- elpy or lsp? seems like both have their benefits ([[https://www.reddit.com/r/emacs/comments/10nctt8/comment/j68npq5/][ref]])
- more info: https://www.mattduck.com/lsp-python-getting-started.html  

*** flycheck

   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t
       :hook
       (lsp-mode . (lambda () (flycheck-mode nil))) ;; turn it off in lsp-mode
       )

   #+end_src

   #+RESULTS:
   | (lambda nil (flycheck-mode nil)) | (lambda nil (flycheck-mode -1)) | lsp-enable-which-key-integration | (lambda nil (diminish 'lsp-lens-mode) (diminish 'lsp-mode LSP)) |

*** ein

#+BEGIN_SRC emacs-lisp
  (use-package ein
    :ensure t
    :custom
    ;; use below to show inline images
    ;; reference: https://github.com/peterewills/emacs-ipython-notebook
    (ein:output-area-inlined-images t) ;; not necessary in older versions
    (ein:slice-image t)
    (pixel-scroll-mode t) ;; enable pixel scroll mode for better image viewing

    :bind
    ("C-c C-k C-c" . 'ein:worksheet-kill-cell)
    )

#+END_SRC

#+RESULTS:
: ein:worksheet-kill-cell

*** elpy

#+BEGIN_SRC emacs-lisp
    (use-package elpy
      :ensure t
      :config
      (elpy-enable)
      (setq elpy-test-runner 'elpy-test-pytest-runner ; use pytest
            elpy-rpc-backend "jedi"
            ;; elpy-rpc-project-specific 't
            ;; elpy-modules (delq 'elpy-module-flymake elpy-modules)
            ;; elpy-test-python-command "pytest --disable-warnings" ;; does it work?;
            )
      ;; (add-hook 'elpy-mode-hook 'flycheck-mode)
      :bind
      ;; remap the keys for some navigation functions
      ("C-s-n" . 'elpy-nav-forward-block)
      ("C-s-p" . 'elpy-nav-backward-block)
      ("C-s-f" . 'elpy-nav-forward-indent)
      ("C-s-b" . 'elpy-nav-backward-indent)
      ("C-s-<left>" . 'elpy-nav-indent-shift-left)
      ("C-s-<right>" . 'elpy-nav-indent-shift-right)
      ("C-c b" . elpy-black-fix-code)
      )

  ;; (setq elpy-test-python-command "pytest --disable-warnings")
#+END_SRC

#+RESULTS:
: pytest --disable-warnings
*** elpy tips
**** navigation

   - =M-.= and =M-,= to goto-def and goback
   - =C-c C-o= to list all functions
   - =M-?= to search for symbols in the current project

**** syntax checking

    - =C-c C-v=: list the errors/warnings (if any) in another window
*** cython

   #+begin_src emacs-lisp
     (use-package cython-mode
       :ensure t)
   #+end_src

   #+RESULTS:
*** code block folding (use origami)
*** misc

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)  ; indentation
#+end_src

#+RESULTS:
*** profiling
**** turn on/off profiling
#+begin_src emacs-lisp
  (defun my/turn-on-python-profiling ()
    (interactive)
    (replace-string "# @profile" "@profile")
    )


  (defun my/turn-off-python-profiling ()
    (interactive)
    (replace-string "@profile" "# @profile")
    )
#+end_src

#+RESULTS:
: my/turn-off-python-profiling

** JavaScript

#+begin_src emacs-lisp
(setq js-indent-level 2)
#+end_src

#+RESULTS:
: 2

** TypeScript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :ensure t
    )
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
#+end_src

#+RESULTS:
: ((\.ts\' . typescript-mode) (\.tsx?\' . typescript-mode) (^yang\.settings$ . jsonc-mode) (/git-rebase-todo\' . git-rebase-mode) (\.dockerfile\' . dockerfile-mode) ([/\]\(?:Containerfile\|Dockerfile\)\(?:\.[^/\]*\)?\' . dockerfile-mode) (README\.md\' . gfm-mode) (\.yml\' . yaml-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (\.hva\' . LaTeX-mode) (\.pxi\' . cython-mode) (\.pxd\' . cython-mode) (\.pyx\' . cython-mode) (\.ipynb\' . ein:ipynb-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Brew\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.cs\' . csharp-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.webp\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.dir-locals\(?:-2\)?\.el\' . lisp-data-mode) (\.eld\' . lisp-data-mode) (eww-bookmarks\' . lisp-data-mode) (tramp\' . lisp-data-mode) (/archive-contents\' . lisp-data-mode) (places\' . lisp-data-mode) (\.emacs-places\' . lisp-data-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|sls\|sld\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-bsdmake-mode) (\.make\' . makefile-bsdmake-mode) (GNUmakefile\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-bsdmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (/PKGBUILD\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|squashfs\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\|SQUASHFS\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . js-json-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) (\.erts\' . erts-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|EPUB\|CBZ\|FB2\|O?XPS\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|epub\|cbz\|fb2\|o?xps\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.mailmap\' . conf-unix-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.heic\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode) (\.drv\' . LaTeX-mode))

#+begin_src emacs-lisp
  ;; if you use typescript-mode
  (use-package tide
    :ensure t
    ;; :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)
           ;; (typescript-mode . flycheck-mode)
           ;; (before-save . tide-format-before-save)  % use prettier instead
           )
    :config
    (setq typescript-indent-level 2)
    (setq typescript-ts-mode-indent-offset 2)
    )


  ;; (setq typescript-ts-mode-indent-offset 2)
  ;; (setq typescript-indent-level 2)

  ;; ;; if you use treesitter based typescript-ts-mode (emacs 29+)
  ;; (use-package tide
  ;;   :ensure t
  ;;   :after (company flycheck)
  ;;   :hook ((typescript-ts-mode . tide-setup)
  ;;          (tsx-ts-mode . tide-setup)
  ;;          (typescript-ts-mode . tide-hl-identifier-mode)
  ;;          (before-save . tide-format-before-save)))
#+end_src

#+RESULTS:
| tide-hl-identifier-mode | tide-setup | company-mode | prettier-js-mode |

*** prettier

#+begin_src emacs-lisp
  (use-package prettier-js
    :ensure t
    )

  (add-hook 'typescript-mode-hook 'prettier-js-mode)
  (add-hook 'javascript-mode-hook 'prettier-js-mode)  
#+end_src

#+RESULTS:
*** flycheck

#+begin_src emacs-lisp
  (add-hook 'typescript-mode-hook 'flycheck-mode)
  (add-hook 'javascript-mode-hook 'flycheck-mode)
#+end_src

#+RESULTS:
| flycheck-mode | prettier-js-mode |

*** company

#+begin_src emacs-lisp
  (add-hook 'typescript-mode-hook 'company-mode)
  (add-hook 'javascript-mode-hook 'company-mode)  
#+end_src

#+RESULTS:
| company-mode | flycheck-mode | prettier-js-mode |

*** flycheck

#+begin_src emacs-lisp
  ;; (add-hook 'typescript-mode-hook flycheck-mode)  
#+end_src

#+RESULTS:
| nil | tide-hl-identifier-mode | tide-setup | company-mode | prettier-js-mode |

** C++
*** resource

- https://tuhdo.github.io/c-ide.html (as early as 2014)
  - what is helm? is it an alternative to consult and vertico?
- https://medium.com/linux-with-michael/emacs-for-c-development-766c8b5866f
  - [[https://github.com/emacs-lsp/lsp-mode/][lsp]] (language server protocol)
    - still developed [[https://github.com/emacs-lsp/lsp-mode/graphs/contributors][these days]]
  - [[https://github.com/MaskRay/ccls][ccls]] (C/C++ language server)
    - no active development [[https://github.com/MaskRay/ccls/graphs/contributors][since 2019]]
  - [[https://www.tabnine.com/][tabnine]] (AI-based code completion)
  - [[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] (enhanced UI including documentation, imenu, etc)
  - [[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] (tree layout file explorer integrated with lsp)
- https://martinsosic.com/development/emacs/2017/12/09/emacs-cpp-ide.html
  - [[https://github.com/Sarcasm/irony-mode][irony]] (language server, e.g., code completion, syntax checking, etc)
    - not actively developed [[https://github.com/Sarcasm/irony-mode/graphs/contributors][since 2019]]
  - [[https://github.com/Andersbakken/rtags][rtags]] (indexer of C++ files)
    - not actively developed [[https://github.com/Andersbakken/rtags/graphs/contributors][since 2021]]
- https://linuxhint.com/c_emacs_configuration/ (2017)
  - "Compiling and running C++ Code"
- https://github.com/emacs-exordium/exordium
  - with some CMAKE support
- https://www.reddit.com/r/emacs/comments/dlf0w7/whats_your_setup_for_cc_in_emacs/
- https://emacs-lsp.github.io/lsp-mode/tutorials/CPP-guide/
  - [[https://clangd.llvm.org/installation.html][clangd]] (language server)
- [[https://github.com/MaskRay/ccls/wiki/lsp-mode][setting up lsp]]
  - [[https://github.com/tigersoldier/company-lsp][company-lsp]] ([[https://github.com/MaskRay/ccls/wiki/lsp-mode][deprecated]])
- choice of language servers:
  - clangd and ccls
*** checklist

- [X] code completion
- [X] syntax checking
- [ ] compilation
- [X] jump to definition
- [ ] switch between header and cpp files
- [X] lsp-treemacs
- [X] symbol reference
- [X] header file completion
- [X] Show function interface and variable definition
- 

*** ignore files

#+begin_src emacs-lisp
  (with-eval-after-load 'treemacs
    (defun treemacs-ignore-c++-object-files (file _)
      (s-suffix? ".o" file))
    (push #'treemacs-ignore-c++-object-files treemacs-ignored-file-predicates))
#+end_src

#+RESULTS:
| treemacs-ignore-c++-object-files | treemacs-ignore-c++-object-files | treemacs--std-ignore-file-predicate | treemacs--mac-ignore-file-predicate |

*** switch between .h and .cpp

use projectile-find-other-file (C-c p a)

*** compiling/build the project

use =compile=

#+begin_src emacs-lisp
  (add-hook
     'c++-mode-hook
      (lambda ()
	(local-set-key (kbd "C-c C-c") #'compile)))
  ;; (define-key c++-mode-map (kbd "C-c C-c") 'compile)
#+end_src

#+RESULTS:
| (lambda nil (local-set-key (kbd C-c C-c) #'compile)) | lsp |

*** jump back and forth between treemacs window

#+begin_src emacs-lisp
  (defun my/treemacs-back-and-forth ()
    (interactive)
    (if (treemacs-is-treemacs-window-selected?)
	(aw-flip-window)
      (treemacs-select-window)))

  (global-set-key (kbd "C-x m") 'my/treemacs-back-and-forth)
#+end_src

#+RESULTS:
: my/treemacs-back-and-forth

** other languages
*** Matlab

need to install matlab-mode manually,
package-install does not work for now

#+BEGIN_SRC emacs-lisp
  (when (and (eq system-type 'gnu/linux)
	     (file-exists-p "/home/xiaoh1/code/matlab-emacs-src"))
    (add-to-list 'load-path "/home/xiaoh1/code/matlab-emacs-src")
    (load-library "matlab-load"))

#+END_SRC

#+RESULTS:
*** sql

tips: install pgformatter first, e.g., =brew install pgformatter=

#+begin_src emacs-lisp
  (use-package sqlformat
    :ensure t
    :config
    (setq sqlformat-command 'pgformatter)
    (setq sqlformat-args '("-s2" "-g")))
#+end_src

#+RESULTS:
: t

** SQL

https://www.reddit.com/r/emacs/comments/cyexjy/use_emacs_as_a_database_client/

useful commands:

- sql-postgres
- or sql-connect (if you have configured sql-connection-alist via customize-variable)
  
*** org-babel

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((sql . t)))
#+end_src

#+RESULTS:

*** TODO https://github.com/kostafey/ejc-sql  
** TODO sublimity

#+RESULTS:
: sublimity

#+begin_src emacs-lisp
	  ;; (use-package sublimity
	  ;;   :ensure t
	  ;;   :config
	  ;;   (sublimity-mode 1))

	  ;; (use-package sublimity-scroll
	  ;;   :ensure t
	  ;;   :config
	  ;;   (sublimity-mode 1))
  ;; (require 'sublimity)
  ;; (require 'sublimity-scroll)
  ;; (sublimity-mode 1)
	;; (require 'sublimity-scroll)


#+end_src

#+RESULTS:
: t

why not showing in non-GUI Emacs?

#+RESULTS:
: t

** code folding using origami

#+begin_src emacs-lisp
  (use-package origami
    :ensure t
    :init (global-origami-mode))

    ; (global-set-key (kbd "C-c c t") 'origami-toggle-node)
    (global-set-key (kbd "C-c o t") 'origami-toggle-node)
#+end_src

#+RESULTS:
: origami-toggle-node

* cloud-related utils
** s3

* yasnippet
*** preparation

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (setq yas-snippet-dirs
          '("~/.emacs.d/snippets"
            ;; "~/.emacs.d/elpa/yasnippet-snippets-20230220.1659/snippets/"
            ;; "~/.emacs.d/elpa/yasnippet-snippets-20230227.1504/snippets"
            "~/.emacs.d/elpa/yasnippet-snippets-20240221.1621/snippets"
            "~/.emacs.d/elpa/yasnippet-snippets-20240603.757/snippets"
            ))
    ;; "~/.emacs.d/elpa/elpy-20220220.2059/"  ; might need to change
    ;; "~/.emacs.d/elpa/yasnippet-snippets-20220221.1234/snippets"  ; might need to change
    (yas-global-mode 1)
    )
#+END_SRC

#+RESULTS:
: t

*** add some off-the-shelf snippets by the community

   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet-snippets
   :ensure t
   )
   #+END_SRC

   #+RESULTS:

*** fast acronyms

#+begin_src emacs-lisp
  (defun my/yas-add-acronyms (mode-sym acronyms)
    "add 'acronyms' to yasnippets for a given mode, e.g., 'org-mode
  acronyms is a list of (list acronym full-name)
  "
    (dolist (acr acronyms)
      (yas--define mode-sym (car acr) (car (cdr acr)))
      )
    )
#+end_src

*** indentation (does it work?)

#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'(lambda () (set (make-local-variable 'yas-indent-line) 'fixed)))
#+end_src

#+RESULTS:
| (lambda nil (set (make-local-variable 'yas-indent-line) 'fixed)) | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | org-add-electric-pairs | (lambda nil (org-bullets-mode)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |
* markup languages
** LaTex
*** preparation
  #+begin_src emacs-lisp
    (use-package tex
      :defer t
      :ensure auctex
      :config
      (setq TeX-auto-save t)
      (setq TeX-save-query nil)
      )

; for MacOS: environment variable fix
    (setenv "PATH"
	    (concat
	      "/usr/local/bin/" ":" "/Library/TeX/texbin/" ":"
	      (getenv "PATH")))
  #+end_src

  #+RESULTS:
  : /usr/local/bin/:/Library/TeX/texbin/:/Users/hanxiao/code/mz-re-ml-new/.venv/bin:/Users/hanxiao/code/mz-re-ml-new/.venv/bin:/Users/hanxiao/google-cloud-sdk/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/TeX/texbin:/usr/local/munki:/Library/TeX/texbin/

*** source correlation with external PDF viewer

#+begin_src emacs-lisp
                                          ; forward/reverse search between PDF and Latex source
  (defun my/latex-buffer-setup ()
    (TeX-source-correlate-mode)
    (TeX-PDF-mode))

  (add-hook 'LaTeX-mode-hook 'my/latex-buffer-setup)
  (setq TeX-source-correlate-method 'synctex
        TeX-view-program-list   ;; Use Skim, it's awesome
        '(("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline -g -b %n %o %b"))
        TeX-view-program-selection '((output-pdf "Skim"))
        TeX-auto-save t
        TeX-parse-self t
        TeX-save-query nil
        ;; TeX-master 'dwim
        )

  (setq-default TeX-master "main_kdd") ; all master files called "main_kdd".
  ;; (setq-default TeX-master "appendix") ; all master files called "main".
  ;; (setq-default TeX-master "main_kais") ; all master files called "main".
  ;; (setq-default TeX-master "reviews_cover_letter.tex")
  ;; (setq-default TeX-master "sn-article") ; all master files called "sn-article".
  ;; (setq-default TeX-master "cover") ; all master files called "cover".
  ;; (setq-default TeX-master "algs") ; all master files called "main".
  (setq-default TeX-master "draft") ; all master files called "main".
  ;; (setq-default TeX-master "cv") ; all master files called "main".
  (setq-default TeX-engine 'default)
#+end_src

#+RESULTS:
: default

*** TODO unbind keybindings

#+begin_src emacs-lisp
  ;; (add-hook latex-mode-hook
  ;; 	  (lambda()
  ;; 	    (local-unset-key (kbd "C-M-a"))))

  (add-hook 'LaTex-mode-hook
	    (lambda()
	      (define-key LaTex-mode-map (kbd "C-M-a") nil)))
#+end_src

#+RESULTS:
| lambda | nil | (define-key LaTex-mode-map (kbd C-M-a) nil) |
| lambda | nil | (define-key latex-mode-map (kbd C-M-a) nil) |

*** text manipulation
**** wrap by href

#+begin_src emacs-lisp
  (defun wrap-by-href ()
    "wrap a text by by \\href"
    (interactive)
    (save-excursion
      (goto-char (region-beginning))
      (insert (concat "\\href{}{")))
    (save-excursion
      (goto-char (region-end))
      (insert "}"))
    (goto-char (+ (region-beginning) 6)) ; go to the first {} to insert the link
    )


  ;; how to define the key only for latex mode?
  ;; tried to the following
  ;; (add-hook 'LaTeX-mode-hook
  ;; 	  (lambda () (local-set-key (kbd "C-c h r") #'wrap-by-href)))
  ;; (eval-after-load 'latex
  ;;   '(define-key LaTeX-mode-map [(kbd "C-c h r")] 'wrap-by-href))
  (global-set-key (kbd "C-c h r") 'wrap-by-href)

#+end_src

#+RESULTS:
: wrap-by-href

*** [[https://github.com/emacs-citar/citar][citar]]

#+begin_src emacs-lisp
  (use-package citar
    :ensure t
    :after oc
    :hook
    (LaTeX-mode . citar-capf-setup)
    (org-mode . citar-capf-setup)

    :custom
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)


    ;; :general
    ;; (:keymaps 'org-mode-map
    ;; 	    :prefix "C-c b"
    ;; 	    "b" '(citar-insert-citation :wk "Insert citation")
    ;; 	    "r" '(citar-insert-reference :wk "Insert reference")
    ;; 	    "o" '(citar-open-notes :wk "Open note"))
    )


#+end_src

#+RESULTS:

*** file opening short-cuts

#+begin_src emacs-lisp
  (defun my/open-defines-tex ()
    "open defines.tex under current directory"
    (interactive)
    (find-file "./defines.tex"))
  (global-set-key (kbd "C-c o d") 'my/open-defines-tex)

#+end_src

#+RESULTS:
: my/open-defines-tex

*** navigation

#+begin_src emacs-lisp
  (defun forward-jump-into-next-brace ()
    (interactive)
    (search-forward "{")
    )
  (defun backward-jump-into-next-brace ()
    (interactive)
    (search-backward "{")
    )

  (defun forward-jump-into-next-pair ()
    "however, for $, we may jump into the closing pair, how to fix it?"
    (interactive)
    (search-forward-regexp "[{\$(]")
    )
  (defun backward-jump-into-next-pair ()
    (interactive)
    (search-backward-regexp "[{\$(]")
    )


  ;; (global-set-key (kbd "C-<tab>") #'forward-jump-into-next-brace)
  ;; (global-set-key (kbd "C-S-<tab>") #'backward-jump-into-next-brace)
  (global-set-key (kbd "C-<tab>") #'forward-jump-into-next-pair)
  (global-set-key (kbd "C-S-<tab>") #'backward-jump-into-next-pair)
  ;; (add-hook 'LaTex-mode-hook (lambda () (
  ;; 				       (local-set-key (kbd "C-<tab>") #'forward-jump-into-next-brace)
  ;; 				  )))
#+end_src

#+RESULTS:
: backward-jump-into-next-pair

** YAML mode

   #+BEGIN_SRC emacs-lisp
   (use-package yaml-mode
   :ensure t
   :config
   (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
   )
   #+END_SRC
** markdown

  #+begin_src emacs-lisp
    (use-package markdown-mode
      :ensure t
      :mode ("README\\.md\\'" . gfm-mode)
      :init (setq markdown-command "multimarkdown"))


  #+end_src

  #+RESULTS:
  : ((\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (README\.md\' . gfm-mode) (\.yml\' . yaml-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.hva\' . latex-mode) (\.ipynb\' . ein:ipynb-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs]\.dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-bsdmake-mode) (\.make\' . makefile-bsdmake-mode) (GNUmakefile\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-bsdmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode) (\.drv\' . latex-mode))

**** pandoc

   #+begin_src emacs-lisp
     (custom-set-variables
      '(markdown-command "/usr/local/bin/pandoc"))
   #+end_src

   #+RESULTS:

** dockerfile mode

   #+begin_src emacs-lisp
     (use-package dockerfile-mode
       :ensure t)
   #+end_src

* terminals
** +multi-term+

#+begin_src emacs-lisp
  ;; (use-package multi-term
  ;;   :ensure t
  ;;   :config (setq multi-term-program "/bin/zsh")
  ;;   :bind ("C-c m t" . 'multi-term)
  ;;   )
#+end_src

#+RESULTS:
: multi-term

how to avoid re-opening a new terminal?

#+RESULTS:
: multi-term

#+begin_src emacs-lisp

#+end_src

** shell-mode

#+begin_src emacs-lisp
(global-set-key (kbd "C-c s h")  'shell)
#+end_src

#+RESULTS:
: shell

** zsh
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

#+RESULTS:
: ansi-term

** +corfu-terminal (with auto-completion)+

#+begin_src emacs-lisp


  ;; (quelpa '(popon
  ;; 	  :fetcher git
  ;; 	  :url "https://codeberg.org/akib/emacs-popon.git"))



  ;; (quelpa '(corfu-terminal
  ;; 	  :fetcher git
  ;; 	  :url "https://codeberg.org/akib/emacs-corfu-terminal.git"))
#+end_src

#+RESULTS:

** ssh

start a remote terminal via ssh

#+begin_src emacs-lisp
  (use-package ssh
    :ensure t)
#+end_src

#+RESULTS:

* miscellaneous
** config reload/edit
*** config edit
#+BEGIN_SRC emacs-lisp
(defun config-visit ()
"visit ~/.emacs.d/config.org"
(interactive)
(find-file "~/.emacs.d/config.org"))
(global-set-key (kbd "C-c o e") 'config-visit)
#+END_SRC

#+RESULTS:
: config-visit

*** config reload

#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org"))
    (org-babel-load-file (expand-file-name "~/.emacs.d/unity.org"))
    )
  ;; (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

#+RESULTS:
: config-reload

*** open ~/.zshrc file

   #+begin_src emacs-lisp
     (defun zshrc-visit ()
       "visit ~/.zshrc"
       (interactive)
       (find-file "~/.zshrc"))
     (global-set-key (kbd "C-c z") 'zshrc-visit)

   #+end_src

** show line/column number

#+begin_src emacs-lisp
(line-number-mode 1)
(column-number-mode 1)
#+end_src
** not sorted yet

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o")  'mode-line-other-buffer)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (when window-system
    (scroll-bar-mode -1))


  (setq split-width-threshold 1 )   ; horizontal split window

  (defalias 'yes-or-no-p 'y-or-n-p)



  (setq scroll-conservatively 100)


  (setq inhibit-startup-message t)

  (setq ring-bell-function 'ignore) ; no warning sound

  (when window-system
    (global-hl-line-mode t)
    (global-prettify-symbols-mode t)
    )

  (setq make-backup-files nil)
  (setq auto-save-default nil)


  (show-paren-mode 1)

#+END_SRC

#+RESULTS:
: t
** TODO word count (does not work)

#+begin_src emacs-lisp
  ;; (use-package cl-lib
  ;;   :ensure t)

  (require 'cl-lib)

  (defvar punctuation-marks '(","
			      "."
			      "'"
			      "&"
			      "\"")
    "List of Punctuation Marks that you want to count.")

  (defun count-raw-word-list (raw-word-list)
    (cl-loop with result = nil
	     for elt in raw-word-list
	     do (cl-incf (cdr (or (assoc elt result)
				  (car (push (cons elt 0) result)))))
	     finally return (sort result
				  (lambda (a b) (string< (car a) (car b))))))

  (defun word-stats ()
    (interactive)
    (let* ((words (split-string
		   (downcase (buffer-string))
		   (format "[ %s\f\t\n\r\v]+"
			   (mapconcat #'identity punctuation-marks ""))
		   t))
	   (punctuation-marks (cl-remove-if-not
			       (lambda (elt) (member elt punctuation-marks))
			       (split-string (buffer-string) "" t )))
	   (raw-word-list (append punctuation-marks words))
	   (word-list (count-raw-word-list raw-word-list)))
      (with-current-buffer (get-buffer-create "*word-statistics*")
	(erase-buffer)
	(insert "| word | occurences |
		 |-----------+------------|\n")

	(dolist (elt word-list)
	  (insert (format "| '%s' | %d |\n" (car elt) (cdr elt))))

	(org-mode)
	(indent-region (point-min) (point-max))
	(goto-char 100)
	(org-cycle)
	(goto-char 79)
	(org-table-sort-lines nil ?N)))
    (pop-to-buffer "*word-statistics*"))
#+end_src

#+RESULTS:
: word-stats

** dmenu (run a command in shell)


#+begin_src emacs-lisp
(use-package dmenu
    :ensure t
    :bind
    ("C-c d m" . 'dmenu))
#+end_src

#+RESULTS:
: dmenu
** editing in browser

#+begin_src emacs-lisp
  (use-package edit-server
    :ensure t
    :commands edit-server-start
    :init (if after-init-time
		(edit-server-start)
	      (add-hook 'after-init-hook
			#'(lambda() (edit-server-start))))
    :config (setq edit-server-new-frame-alist
		  '((name . "Edit with Emacs FRAME")
		    (top . 200)
		    (left . 200)
		    (width . 80)
		    (height . 25)
		    (minibuffer . t)
		    (menu-bar-lines . t)
		    ;; comment out the following due to "No applicable method: frame-creation-function"
		    ;; reference: https://emacs-china.org/t/edit-server-no-applicable-method-frame-creation-function/17562
		    ;; (window-system . x)
		    )))
#+end_src

#+RESULTS:
: t


** horizontal centering

#+begin_src emacs-lisp
(defun my-horizontal-recenter ()
  "make the point horizontally centered in the window"
  (interactive)
  (let ((mid (/ (window-width) 2))
        (line-len (save-excursion (end-of-line) (current-column)))
        (cur (current-column)))
    (if (< mid cur)
        (set-window-hscroll (selected-window)
                            (- cur mid)))))
(global-set-key (kbd "C-S-l") 'my-horizontal-recenter)
#+end_src

#+RESULTS:
: my-horizontal-recenter

** doc-view resolution

#+begin_src emacs-lisp
  (setq doc-view-resolution 400)
#+end_src

#+RESULTS:
: 400

* text manipulation
** common functions

#+begin_src emacs-lisp
  (defun refrained-backward-word ()
    "similar to backward-word but does not move to the previous word if the cursor is at the begining of the word"
    (unless (member  ;; check if the previous point is left paren or space, or newline
             (char-to-string (char-after (1- (point))))
             '("(" " " "\n" "-"))
      (backward-word))
    )

  (defun refrained-backward-sexp ()
    "similar to backward-sexp but does not move to the previous sexp if the cursor is at the begining of the sexp"
    (unless (member  ;; check if the previous point is left paren or space, or newline
             (char-to-string (char-after (1- (point))))
             '("(" " " "\n"))
      (backward-sexp))
    )

  (defun search-backward-no-move (str)
    "search backward for a string without moving the cursor, return the position of the first occurrence"
    (save-excursion (search-backward str))
    )

  (defun sexp-at-point ()
    "return a sexp at point."
    (let (beg end)
      (save-excursion
        (refrained-backward-sexp)
        (setq beg (point))
        (forward-sexp)
        (setq end (point))
        (buffer-substring-no-properties beg end)
        ))
    )


  (defun path-at-point ()
    "return a path at point."
    (let (beg end)
      (save-excursion
        (skip-chars-backward my/path-delimiters)
        (setq beg (point))
        (skip-chars-forward my/path-delimiters)
        (setq end (point))
        (buffer-substring-no-properties beg end)
        ))
    )

  (defun buffer-file-name-with-line-number ()
    "get the buffer file name appended with line number of the current cursor"
    (concat (buffer-file-name) "::" (number-to-string (line-number-at-pos)))
    )  
#+end_src

#+RESULTS:
: buffer-file-name-with-line-number

** move line

#+begin_src emacs-lisp
(defun move-line (n)
  "Move the current line up or down by N lines."
  (interactive "p")
  (setq col (current-column))
  (beginning-of-line) (setq start (point))
  (end-of-line) (forward-char) (setq end (point))
  (let ((line-text (delete-and-extract-region start end)))
    (forward-line n)
    (insert line-text)
    ;; restore point to original column in moved line
    (forward-line -1)
    (forward-char col)))

(defun move-line-up (n)
  "Move the current line up by N lines."
  (interactive "p")
  (move-line (if (null n) -1 (- n))))

(defun move-line-down (n)
  "Move the current line down by N lines."
  (interactive "p")
  (move-line (if (null n) 1 n)))
#+end_src

#+RESULTS:
: move-line-down

** line/region copying/deletion in Avy

#+begin_src emacs-lisp
  ;; (global-set-key (kbd "C-c w l") 'avy-copy-line)  ; copy a line
  (global-set-key (kbd "C-c w r") 'avy-copy-region)  ; copy a region
  ;; (global-set-key (kbd "C-c d l") 'avy-kill-whole-line)  ; kill&save a line
  (global-set-key (kbd "C-c d r") 'avy-kill-region)  ; kill&save a region
#+end_src

#+RESULTS:
: avy-kill-region
** subword

when pressing =M-f= or =M-b= in camel-case strings, e.g., ThisIsAWord, move /subword/.

#+begin_src emacs-lisp
(global-subword-mode 1)
#+end_src

#+RESULTS:

** electric pair mode
*** global pairs
#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\{ . ?\})
			      ;; (?\' . ?\')  ;
			      (?\" . ?\")
			      ;; (?\` . ?\`)
			      ;; (?\$ . ?\$)
  ))
  (electric-pair-mode nil)
#+end_src

#+RESULTS:
: t

*** pairs for latex

#+begin_src emacs-lisp
  (defvar latex-electric-pairs '(;; (?= . ?=)
				 (?$ . ?$)) "Electric pairs for latex.")

  (defun add-latex-electric-pairs ()
    (setq-local electric-pair-pairs (append electric-pair-pairs latex-electric-pairs))
    (setq-local electric-pair-text-pairs electric-pair-pairs))

  (add-hook 'org-mode-hook 'add-latex-electric-pairs)

  (add-hook 'latex-mode-hook 'add-latex-electric-pairs) ; does not work, very weird

  ;; (use-package company
  ;;   :hook
  ;;   (LaTex-mode . add-latex-electric-pairs)
  ;;   )

#+end_src

#+RESULTS:
| add-latex-electric-pairs |

** global variables
#+begin_src emacs-lisp
  (defvar my/path-delimiters "^  \t\n\"`'‘’“”|()[]{}「」<>〔〕〈〉《》【】〖〗«»‹›❮❯❬❭〘〙·。\\" "characters that delimit a path")
#+end_src

#+RESULTS:
: my/path-delimiters

** kill word, sexp, and line

#+begin_src emacs-lisp
  (defun kill-word-at-point ()
    "kill the current word"
    (interactive)
    (refrained-backward-word)
    (kill-word 1)
    )

  (defun kill-sexp-at-point ()
    "kill the current sexp"
    (interactive)
    (refrained-backward-sexp)
    (kill-sexp 1)
    )


  (defun kill-line-at-point ()
    "kill the current line"
    (interactive)
    (move-beginning-of-line 1)
    (kill-whole-line)  ;; kill-line does not kill the \n
    (previous-line)
    )

  (defun kill-path-at-point ()
    "kill path at point"
    (interactive)
    (let (beg end)        
      (save-excursion
	(skip-chars-backward my/path-delimiters)
	(setq beg (point))
	(skip-chars-forward my/path-delimiters)
	(setq end (point))
	(kill-region beg end))
      )
    )
  
  ;; to override major-mode keybindings (e.g., C-c C-k in org-mode is used)
  (bind-keys*
   ("C-c d w" . kill-word-at-point)
   ("C-c d l" . kill-line-at-point)
   ("C-c d s" . kill-sexp-at-point)
   ("C-c d p" . kill-path-at-point)
   )
#+end_src

#+RESULTS:
: kill-path-at-point
** kill, copy, and yank in Latex
# C-c w s on $\apxcntcore$ gives $\apxcntcore$, instead of \apxcntcore
** copy sexp as a link to where it occurs


#+begin_src emacs-lisp

  (defun copy-sexp-as-link-at-point ()
    "copy the current sexp as link pointing to the current file at the cursor position"
    (interactive)
    (let* ((content (sexp-at-point))
           (path (buffer-file-name-with-line-number))
           (link (format "[[%s][%s]]" path content)))
           (kill-new link)
           (message (format "copied %s" link))
      )
    )
  (global-set-key (kbd "C-c w k") 'copy-sexp-as-link-at-point)
#+end_src

#+RESULTS:
: copy-sexp-as-link-at-point

** copy word, line, sexp
*** copy word
#+begin_src emacs-lisp
    (defun copy-word (&optional arg)
      "copy a word at point into kill-ring"
      (interactive "p")
      (save-excursion
	;; to the begining of the sexp if needed
	(refrained-backward-word)
	(mark-word)  ;; mark the sexp
	(kill-ring-save (region-beginning) (region-end))
	(message (format "copied %s"(car kill-ring)))
	)
      )
  (global-set-key (kbd "C-c w w") 'copy-word)

  ;; (defun get-point (symbol &optional arg)
  ;;   "get the point"
  ;;   (funcall symbol arg)
  ;;   (point))

  ;; (defun copy-thing (begin-of-thing end-of-thing &optional arg)
  ;;   "Copy thing between beg & end into kill ring."
  ;;   (save-excursion
  ;;     (let ((beg (get-point begin-of-thing 1))
  ;; 	  (end (get-point end-of-thing arg)))
  ;;       (copy-region-as-kill beg end))))

  ;; (defun my-copy-word (&optional arg)
  ;;   "Copy words at point into kill-ring"
  ;;   (interactive "P")
  ;;   (copy-thing 'backward-word 'forward-word arg)
  ;;   (message (format "copied %s"(car kill-ring)))
  ;;   )

  ;; (global-set-key (kbd "C-c w w") 'my-copy-word)

#+end_src

#+RESULTS:
: copy-word

*** copy sexp
#+begin_src emacs-lisp
  (defun copy-sexp (&optional arg)
    "copy an sexp at point into kill-ring"
    (interactive "p")
    (save-excursion
      ;; to the begining of the sexp if needed
      (refrained-backward-sexp)
      (mark-sexp)  ;; mark the sexp
      (kill-ring-save (region-beginning) (region-end))
      (message (format "copied %s"(car kill-ring)))
      )
    )
  (global-set-key (kbd "C-c w s") 'copy-sexp)
#+end_src

#+RESULTS:
: copy-sexp

*** copy line

   #+begin_src emacs-lisp
     (defun copy-whole-line ()
       (interactive)
       (save-excursion
         (kill-new
          (buffer-substring
           (point-at-bol)
           (point-at-eol))))
       (message "a line is copied")
       )
     (global-set-key (kbd "C-c w l") 'copy-whole-line)
   #+end_src

   #+RESULTS:
   : copy-whole-line

** hungry-delete

#+begin_src emacs-lisp
  (use-package hungry-delete
  :ensure t
  :config (global-hungry-delete-mode)
  :bind
  ("C-c h d f" . hungry-delete-forward)
  ("C-c h d b" . hungry-delete-backward))
#+end_src

#+RESULTS:
: hungry-delete-backward

** +delete a pair (of parenthesis, bracket, etc)+

#+begin_src emacs-lisp
  ;; (global-set-key (kbd "C-c d p") 'delete-pair)
#+end_src

#+RESULTS:
: delete-pair

** copy path at point

   - test example: output_dir: gs://unity-ads-dd-ds-pRd-models/tfrecords/skad_c2ip/

   #+begin_src emacs-lisp
        (defun copy-path-at-point ()
          "copy a path at point."
          (interactive)
          (let ((str (path-at-point)))
            (with-temp-buffer
              (insert str)
              (clipboard-kill-region (point-min) (point-max)))
            (message (format "copied '%s'" str))
            )
          )

        (global-set-key (kbd "C-c w p") 'copy-path-at-point)
   #+end_src

   #+RESULTS:
   : copy-path-at-point
   
** surround sexp by string
*** main functions
#+begin_src emacs-lisp
  (defun close-string (open-str)
    "given an open string (, return the close string, such as )"
    (cond
     ((string= open-str "(") ")")
     ((string= open-str "[") "]")
     ((string= open-str "<") ">")
     ((string= open-str "{") "}")
     (t open-str)
     )
    )

  ;; Instead of using region-beginning and region-end, a command designed to operate on a region should normally use interactive with the ‘r’ specification to find the beginning and end of the region. 
  (defun my/surround-region (start end open-str)
    (save-excursion
      (goto-char end)
      (insert (close-string open-str))
      (goto-char start)
      (insert open-str)
      )
    )


  (defun my/surround-sexp (open-str)
    "surround a sexp by str"
    (save-excursion
      (refrained-backward-sexp)
      (insert open-str)
      (forward-sexp)
      (insert (close-string open-str))
      )
    )      

#+end_src

#+RESULTS:
: my/surround-sexp
*** keybindings

#+begin_src emacs-lisp
  (defun my/surround-by-single-quote (beg end)
    (interactive "r")
    (if (use-region-p)
	(my/surround-region beg end "'")
      (my/surround-sexp "'"))
    )

  (defun my/surround-by-double-quote (beg end)
    (interactive "r")
    (if (use-region-p)
	(my/surround-region beg end "\"")
      (my/surround-sexp "\""))
    )

  (defun my/surround-by-back-tick (beg end)
    (interactive "r")
    (if (use-region-p)
	(my/surround-region beg end "`")
      (my/surround-sexp "`"))
    )
  (defun my/surround-by-dollar (beg end)
    (interactive "r")
    (if (use-region-p)
	(my/surround-region beg end "$")
      (my/surround-sexp "$"))    
    )

  (defun my/surround-by-parenthesis (beg end)
    (interactive "r")
    (if (use-region-p)
	(my/surround-region beg end "(")
      (my/surround-sexp "("))
    )


  (defun my/surround-by-brace (beg end)
    (interactive "r")
    (if (use-region-p)
	(my/surround-region beg end "{")
      (my/surround-sexp "{"))
    )

  (defun my/surround-by-bracket (beg end)
    (interactive "r")
    (if (use-region-p)
	(my/surround-region beg end "[")
      (my/surround-sexp "["))
    )

  (defun my/surround-by-asterisk (beg end)
    (interactive "r")
    (if (use-region-p)
	(my/surround-region beg end "*")
      (my/surround-sexp "*"))
    )    

  (defun my/surround-by-plus (beg end)
    (interactive "r")
    (if (use-region-p)
	(my/surround-region beg end "+")
      (my/surround-sexp "+"))
    )  

  (defun my/surround-by-slash (beg end)
    (interactive "r")
    (if (use-region-p)
	(my/surround-region beg end "/")
      (my/surround-sexp "/"))
    )

  (global-set-key (kbd "C-c s '") 'my/surround-by-single-quote)
  (global-set-key (kbd "C-c s \"") 'my/surround-by-double-quote)
  (global-set-key (kbd "C-c s $") 'my/surround-by-dollar)
  (global-set-key (kbd "C-c s `") 'my/surround-by-back-tick)
  (global-set-key (kbd "C-c s (") 'my/surround-by-parenthesis)
  (global-set-key (kbd "C-c s [") 'my/surround-by-bracket)
  (global-set-key (kbd "C-c s {") 'my/surround-by-brace)
  (global-set-key (kbd "C-c s *") 'my/surround-by-asterisk)
  (global-set-key (kbd "C-c s +") 'my/surround-by-plus)
  (global-set-key (kbd "C-c s /") 'my/surround-by-slash)
   #+end_src

   #+RESULTS:
   : my/surround-by-slash

** surround path by string

*** helper functions
  #+begin_src emacs-lisp :results output

    (defun my/surround-path-by-string (str)
      "surround a path-like string by another string"
      (let*  ((open-str str)
	      (close-str (close-string open-str))
	      )
	(save-excursion
	  (skip-chars-backward my/path-delimiters)
	  (insert open-str)
	  (skip-chars-forward my/path-delimiters)
	  (insert close-str)
	  )
	)
      )    
  #+end_src

  #+RESULTS:


   #+RESULTS:
   : my/surround-chunk-by-brace

** TODO surround a Python expression with a callable

nice-to-have:
 
- [ ] autocomplete the function/method name e.g., using consult
  
#+begin_src emacs-lisp :results output
  (defun my/py-insert-callable (beg end)
    "prepends a Python callable (e.g., function or method) to a string (e.g., representing an argument, e.g., `args' -> `func(args)'"
    (interactive "r")
    (let ((py-callable (read-string "Which callable:")))
      (save-excursion
	(my/surround-by-parenthesis beg end)
	(unless (string= (char-to-string (char-after)) "(") ; if we are not at the begining of the the chunk
	  (search-backward "(")); search backward to the point to insert the prefix
	(insert py-callable)
	)
      )
    )

  ;; enable the following keybinding only in Python
  (use-package elpy
    :bind ("C-c s f" . 'my/py-insert-callable))
#+end_src


#+RESULTS:

** TODO delete calling to a callable
** delete text between "a pair"

pairs could be parenthesis, bracket, dollar, quote, double-quote, etc

#+begin_src emacs-lisp  
  (defun delete-in-between (open)
    "delete the text between a pair of symbols (e.g., `(' and `)'), \
       the first element of the pair is speicifed by `open', \
       while the second is inferred automatically using `close-str'"
    (let ((close (close-string open)))
      (save-excursion
	(delete-region
	 (+ (search-backward-no-move open) (length open)) ; leave the open and close string there
	 (- (search-forward close) (length close))
	 )
	)
      )
    )


  (defun my/delete-between-single-quote  ()
    (interactive)
    (delete-in-between "'")
    )
  (defun my/delete-between-double-quote  ()
    (interactive)
    (delete-in-between "\"")
    )
  (defun my/delete-between-parenthesis  ()
    (interactive)
    (delete-in-between "(")
    )
  (defun my/delete-between-bracket  ()
    (interactive)
    (delete-in-between "[")
    )
  (defun my/delete-between-brace  ()
    (interactive)
    (delete-in-between "{")
    )
  (defun my/delete-between-dollar  ()
    (interactive)
    (delete-in-between "$")
    )    

  (defun my/delete-between-equal  ()
    (interactive)
    (delete-in-between "=")
    )

  (global-set-key (kbd "C-c d '") 'my/delete-between-single-quote)
  (global-set-key (kbd "C-c d \"") 'my/delete-between-double-quote)
  (global-set-key (kbd "C-c d (") 'my/delete-between-parenthesis)
  (global-set-key (kbd "C-c d [") 'my/delete-between-bracket)
  (global-set-key (kbd "C-c d {") 'my/delete-between-brace)
  (global-set-key (kbd "C-c d $") 'my/delete-between-dollar)
  (global-set-key (kbd "C-c d =") 'my/delete-between-equal)
#+end_src

#+RESULTS:
: my/delete-between-equal

** ❤️ smartparen

[[https://github.com/Fuco1/smartparens#getting-started][more docs]] and [[https://ebzzry.com/en/emacs-pairs/#wrapping][a tutorial]]

*** installation

  
#+begin_src emacs-lisp
    (use-package smartparens-config
      :ensure smartparens
      :config
      (progn
        (show-smartparens-global-mode t)
        (electric-pair-mode nil)  ;; disable electric-pair-mode since the two modes sometimes get triggered simultaneously
        )
      :hook
      (LaTeX-mode . turn-on-smartparens-mode)
      )

    (add-hook 'prog-mode-hook 'turn-on-smartparens-mode)
    ;; (add-hook 'LaTex-mode-hook 'turn-on-smartparens-mode)
    ;; (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
    ;; (add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)

    ;; (global-set-key (kbd "C-M-a") 'sp-beginning-of-sexp)
    ;; (global-set-key (kbd "C-M-e") 'sp-end-of-sexp)

    ;; (global-set-key (kbd "C-down") 'sp-down-sexp)
#+end_src

#+RESULTS:
| turn-on-smartparens-mode | rainbow-delimiters-mode |

*** keybindings

for MAC users: deselect "M-<up>" and "M-<down>" binding in "keyboard short cut" -> "mission control"
  
#+begin_src emacs-lisp

  (bind-keys
   :map smartparens-mode-map
   ("M-a" . sp-beginning-of-sexp)
   ("M-e" . sp-end-of-sexp)

   ;; hierarchy-level movement
   ("C-<down>" . sp-down-sexp)
					  ; it might be clearer if the name is sp-forward-down-sexp, which forward + down on paren
					  ; and the cursor stops at the begining of the target sexp

   ("C-<up>" . sp-up-sexp)
					  ; = forward and up, which jumps out of the current paren

   ("M-<down>" . sp-backward-down-sexp)
					  ; = backward and "jump in" on paren the reverse of sp-down-sexp
					  ; the cursor stops at the beginning of the target
   ("M-<up>" . sp-backward-up-sexp)
					  ; = backward and "jump out"

   ;; balanced expression-level movement, like normal "C-M-f" and "C-M-b"
   ("C-M-f" . sp-forward-sexp)
					  ; forward one sexp (including comments) to the end of the target
   ("C-M-b" . sp-backward-sexp)
					  ; backward one sexp to the begining of the target

   ;; sexp-level movement
   ;; keybinding is set to mimic org-mode's C-c C-[n|p]
   ("C-M-n" . sp-next-sexp)
					  ; move to the begining of the next sexp, which is equals to sp-down-sexp + sp-up-sexp + sp-down-sexp
   ("C-M-p" . sp-previous-sexp)           ;

   ;;free-form movement, ignoring the hierarchy
   ("C-S-f" .  sp-forward-symbol)

   ("C-S-b" .  sp-backward-symbol))

#+end_src

#+RESULTS:
: sp-backward-symbol

comments in navigation in elisp:

- think of the code as a tree!
  
#+begin_src emacs-lisp
  (let ((x "asdf asdf asdfads ")))

  (defun format-date (format)
    "Insert date with FORMAT specification using a specific locale."
    (let (
	  (system-time-locale "en_US.UTF-8"))
      (insert (format-time-string format))))

  "asf"

  (defun blah ()
    "Returns blah of foo."
    (asf)
    (asdf))
  (defun blah () (let ((x 0)) (+ x 1)))


  (defun asd ()
    (insert (a very long and long and long and long list
) (asdf asdf ads )))

  "asdfasdfads sadf asdf asdf ads"
#+end_src

#+RESULTS:
: asdfasdfads sadf asdf asdf ads

*** wrapping

#+begin_src emacs-lisp
  (defun wrap-with-parens (&optional arg)
    (interactive "p")
    (sp-wrap-with-pair "(")
    )	    

  (defun wrap-with-brackets (&optional arg)
    (interactive "p")
    (sp-wrap-with-pair "[")
    )	    

  (defun wrap-with-braces (&optional arg)
    (interactive "p")
    (sp-wrap-with-pair "{")
    )	    

  (defun wrap-with-single-quotes (&optional arg)
    (interactive "p")
    (sp-wrap-with-pair "'")
    )

  (defun wrap-with-double-quotes (&optional arg)
    (interactive "p")
    (sp-wrap-with-pair "\"")
    )

  (defun wrap-with-back-quotes (&optional arg)
    (interactive "p")
    (sp-wrap-with-pair "`")
    )

  (defun wrap-with-underscores (&optional arg)
    (interactive "p")
    (sp-wrap-with-pair "_")
    )

  (bind-keys
   :map smartparens-mode-map
   ("C-c s ("  . wrap-with-parens)
   ("C-c s ["  . wrap-with-brackets)
   ("C-c s {"  . wrap-with-braces)
   ;; ("C-c s '"  . wrap-with-single-quotes) ; do not collide with C-' in yasnippet-mode
   ("C-c s \"" . wrap-with-double-quotes)
   ("C-c s _"  . wrap-with-underscores)
   ;; ("C-c s `"  . wrap-with-back-quotes) ; do not collide with C-` in latex-mode
   )
#+end_src

#+RESULTS:
: wrap-with-underscores

*** unwrapping

#+begin_src emacs-lisp
  (bind-keys
   :map smartparens-mode-map
   ("M-[" . sp-backward-unwrap-sexp)
					  ; unwrap the previous expression
   ("M-]" . sp-unwrap-sexp))
					  ; unwrap the following expression


  ;; (foo (bar x y z))
#+end_src

#+RESULTS:
: sp-unwrap-sexp

*** slurp and barf
#+begin_src emacs-lisp
  (bind-keys
     :map smartparens-mode-map
     ("C-<right>" . sp-forward-slurp-sexp)
					    ; takes in the next sexp
     ("C-<left>" . sp-backward-slurp-sexp)
					  ; takes in the previous sexp

     ("M-<right>" . sp-forward-barf-sexp)
					    ; takes out the next sexp
     ("M-<left>" . sp-backward-barf-sexp)
					    ; takes out the previous sexp   
     )

  ;; [foo bar "baz"]
  ;; [foo bar] baz
#+end_src

#+RESULTS:
: sp-backward-barf-sexp

*** swapping

#+begin_src emacs-lisp
  (bind-keys
     :map smartparens-mode-map
     ("C-M-t" . sp-transpose-sexp)
     )
  ;; (a) (b (c))
#+end_src


#+RESULTS:
: sp-transpose-sexp

*** deletion

useful to kill an expression (including function)

#+begin_src emacs-lisp
  (bind-keys
     :map smartparens-mode-map
     ("C-M-k" . sp-kill-sexp)
     )



#+end_src

#+RESULTS:
: sp-kill-sexp

** copy file and line

#+begin_src emacs-lisp
  (defun copy-current-line-position-to-clipboard ()
    "Copy current line in file to clipboard as '</path/to/file>:<line-number>'."
    (interactive)
    (let ((path-with-line-number (buffer-file-name-with-line-number)))
      (kill-new path-with-line-number)
      (message (concat path-with-line-number " copied to clipboard"))))

  (global-set-key (kbd "C-c w f") 'copy-current-line-position-to-clipboard)
#+end_src

#+RESULTS:
: copy-current-line-position-to-clipboard

* avy enhancement
- what is pop-global-mark? what does it do? (C-x C-SPC)

** customize avy-keys
  #+begin_src emacs-lisp
    (use-package avy
      :config
      (setq avy-keys '(?a ?s ?d ?f ?g ?h ?j ?l))
    )
  #+end_src

  #+RESULTS:
  : t

** kill words, lines, etc
#+begin_src emacs-lisp
  (defun avy-action-kill-whole-line (pt)
    (save-excursion
      (goto-char pt)
      (kill-whole-line))
    (select-window
     (cdr
      (ring-ref avy-ring 0)))
    t)

  (use-package avy
    :ensure t
    :config
    (setf (alist-get ?k avy-dispatch-alist) 'avy-action-kill-stay
	  (alist-get ?K avy-dispatch-alist) 'avy-action-kill-whole-line)
    )
#+end_src

#+RESULTS:
: t

** yanking


#+begin_src emacs-lisp
  (defun avy-action-copy-whole-line (pt)
    (save-excursion
      (goto-char pt)
      (cl-destructuring-bind (start . end)
	  (bounds-of-thing-at-point 'line)
	(copy-region-as-kill start end)))
    (select-window
     (cdr
      (ring-ref avy-ring 0)))
    t)

  (defun avy-action-yank-whole-line (pt)
    (avy-action-copy-whole-line pt)
    (save-excursion (yank))
    t)

  (use-package avy
    :config
    (setf (alist-get ?y avy-dispatch-alist) 'avy-action-yank
	  (alist-get ?Y avy-dispatch-alist) 'avy-action-yank-whole-line
	  (alist-get ?w avy-dispatch-alist) 'avy-action-copy
	  (alist-get ?W avy-dispatch-alist) 'avy-action-copy-whole-line
	  )
    )
#+end_src

#+RESULTS:
: t

** teleport / transpose

=teleporting= moves sexp, e.g., =(print some-var)=, or a word , e.g., =pop-global-mark=

#+begin_src emacs-lisp
  (defun avy-action-teleport-whole-line (pt)
    (avy-action-kill-whole-line pt)
    (save-excursion (yank)) t)

  (use-package avy
    :config
    (setf (alist-get ?t avy-dispatch-alist) 'avy-action-teleport
	  (alist-get ?T avy-dispatch-alist) 'avy-action-teleport-whole-line)
    )
#+end_src

#+RESULTS:
: t

** zap to char

Kill from point up to PT.

#+begin_src emacs-lisp
  (use-package avy
    :config
    (setf (alist-get ?z avy-dispatch-alist) 'avy-action-zap-to-char)
    )
#+end_src

** mark (and activate) a candidate word or sexp

- use =m= to highlight an sexp or word, using avy-action-mark

- (the marked region is activated by default)

#+begin_src python
  exp1 = (1 + 2 + 3)
  exp2 = (4 + 5 + 6)
#+end_src

** mark the region from point to a candidate

- (it does not activate the region)

- to activate it, use =C-x C-x=

#+begin_src emacs-lisp
  (defun avy-action-mark-to-char (pt)
    (activate-mark)
    (goto-char pt))

  (use-package avy
    :config
    (setf (alist-get ?  avy-dispatch-alist) 'avy-action-mark-to-char)
    )
#+end_src

** look up the documentation for a symbol

#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :bind
    ("C-c h f" . helpful-at-point)
    )

  (defun avy-action-helpful (pt)
    (save-excursion
      (goto-char pt)
      (helpful-at-point))
    (select-window
     (cdr (ring-ref avy-ring 0)))
    t)

  (use-package avy
    :config
    (setf (alist-get ?H avy-dispatch-alist) 'avy-action-helpful)

    )
#+end_src

#+RESULTS:
: t

** embark

#+begin_src emacs-lisp
  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    )

  ;; use citar-embard to enable using citation-key as target
  (use-package citar-embark
    :ensure t
    :after citar embark
    ;; :config (citar-embark-mode)
    )

  (defun avy-action-embark (pt)
    (unwind-protect
	(save-excursion
	  (goto-char pt)
	  (embark-act))
      (select-window
       (cdr (ring-ref avy-ring 0))))
    t)

  (setf (alist-get ?. avy-dispatch-alist) 'avy-action-embark)
#+end_src

#+RESULTS:
: avy-action-embark

** smell test


- Switching windows multiple times to land my cursor on some text

- Isearching through more than three matches to jump to the right one

- Moving the point a long distance to run a lookup command

- Activating the mark manually (C-SPC) all the time

- Jumping to locations to delete single words
* searching
** +swiper+

using consult-line instead to enable orderless search
  #+begin_src  emacs-lisp
    ;; (use-package swiper
    ;;   :ensure t
    ;;   :bind
    ;;   ("C-s" . swiper)
    ;;   ("C-r" . swiper-backward)
    ;;   )
  #+end_src

  #+RESULTS:
  : swiper-backward

** [[https://github.com/minad/consult][consult]]
*** key bindings
Consult provides search and navigation commands

#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :bind
    ("C-c f" . 'consult-find)  ;; find file
    ("C-c i" . 'consult-imenu) ;;  find functions, classes, etc in Python script, or headings in org
					  ; consult-imenu-multi for multiple buffers
    ("C-s" . 'consult-line)  ;; line search in current buffer
    ("C-c s g" . 'consult-git-grep) ;; search in git-tracked files
    ("C-c y" . 'consult-yank-from-kill-ring)
    ("C-c r s" . 'consult-register-store)
    ("C-c r l" . 'consult-register)
    ("C-c r l" . 'consult-register)
    ("C-c m" . 'consult-mark)
    ("M-g M-g" . 'consult-goto-line)
    ("C-c c e" . 'consult-compile-error)
    )
#+end_src

#+RESULTS:
: consult-compile-error

other useful functions:

- consult-line-multi: search line in multiple buffers
- 
#+RESULTS:
: consult-goto-line

*** TODO ignore certain files in git-grep

#+begin_src emacs-lisp
  (setq consult-git-grep-args "git --no-pager grep   --null --color=never --ignore-case   --extended-regexp --line-number -I")

  ;; tried "git --no-pager grep   --null --color=never --ignore-case   --extended-regexp --line-number -I -- ':!*.tjs'"
  ;; perhaps need to print the command
  ;; reference: https://github.com/minad/consult/issues/395
#+end_src

#+RESULTS:
: git --no-pager grep   --null --color=never --ignore-case   --extended-regexp --line-number -I

*** TODO ignore certain files in consult-find

what command is used?
** search in the other window

#+begin_src emacs-lisp
  (defun consult-line-other-window (prefix)
      "Function to consult-line in other-window."
      (interactive "P")
      (unless (one-window-p)
	(save-excursion
	  (let ((next (if prefix -1 1)))
	    (other-window next)
	    (consult-line)
	    (other-window (- next))))))

  ;; (defun consult-backward-other-window (prefix)
  ;;   "Function to consult-backward in other-window."
  ;;   (interactive "P")
  ;;   (unless (one-window-p)
  ;;     (save-excursion
  ;;       (let ((next (if prefix 1 -1)))
  ;; 	(other-window next)
  ;; 	(consult-line)
  ;; 	(other-window (- next))))))

  (define-key global-map (kbd "C-M-s") 'consult-line-other-window)
  ;; (define-key global-map (kbd "C-M-r") 'consult-backward-other-window)

#+end_src

#+RESULTS:
: consult-line-other-window

* magit (version control)

   #+begin_src emacs-lisp
     (use-package magit
       :ensure t)
   #+end_src

   #+RESULTS:

** instructions

- use =C-c C-c= to show all Git operations

** global .gitignore

#+begin_src bash
git config --global core.excludesfile ~/.gitignore
#+end_src
* music player (simple-mpc)

#+begin_src emacs-lisp
  (use-package simple-mpc
    :ensure t)
#+end_src

#+RESULTS:
* archive
** +IDO+
** +preparation and ignore files+

#+BEGIN_SRC emacs-lisp
  ;; (use-package ido
  ;;   :ensure t
  ;;   :config
  ;;   (setq ido-enable-flex-matching nil
  ;; 	ido-create-new-buffer 'always
  ;; 	ido-everywhere t)
  ;;   (add-to-list 'ido-ignore-files "\.bak")
  ;;   (add-to-list 'ido-ignore-files "\.log")
  ;;   (add-to-list 'ido-ignore-files ".venv")
  ;;   (add-to-list 'ido-ignore-files "__pycache__")
  ;;   (add-to-list 'ido-ignore-files "\.pytest_cache")
  ;;   (add-to-list 'ido-ignore-files "\.pkl")
  ;;   ;; data files
  ;;   (add-to-list 'ido-ignore-files "\.hdf5")
  ;;   ;; latex-related
  ;;   (add-to-list 'ido-ignore-files "\.nav")
  ;;   (add-to-list 'ido-ignore-files "\.out")
  ;;   (add-to-list 'ido-ignore-files "\.pdf")
  ;;   (add-to-list 'ido-ignore-files "\.snm")
  ;;   (add-to-list 'ido-ignore-files "\.synctex.gz")
  ;;   ;; org
  ;;   (add-to-list 'ido-ignore-files "\.org_archive")
  ;;   (ido-mode 1)
  ;;   )
#+END_SRC

#+RESULTS:
: t
** +vertical IDO+

   #+BEGIN_SRC  emacs-lisp
     ;; (use-package ido-vertical-mode
     ;;   :ensure t
     ;;   :requires ido
     ;;   :config
     ;;   (ido-vertical-mode 1)
     ;;   (setq ido-vertical-define-keys 'C-n-and-C-p-only)
     ;;   )
   #+END_SRC

   #+RESULTS:
   : t

** +smex+

#+BEGIN_SRC emacs-lisp
  ;; (use-package smex
  ;;   :ensure t
  ;;   :init (smex-initialize)
  ;;   :bind
  ;;   ("M-x" . smex))
#+END_SRC


#+RESULTS:
: consult-buffer
