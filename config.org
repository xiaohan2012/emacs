* random
* wish list
  
- [ ] +packages by minad+
  - https://www.youtube.com/watch?v=f0FMo_XxujU
  - +https://github.com/minad/tab-bookmark+
  - +learn about bookmarks+
- check this blog: https://wilkesley.org/~ian/xah/emacs/emacs.html
- [X] auto-completion:
  - vertico: https://github.com/doomemacs/doomemacs/tree/master/modules/completion/vertico
  - consult: https://github.com/minad/consult
    - what does it do?
  - marginalia: https://github.com/minad/marginalia
    - which enriches the annotation of auto-completion candidates
  - embark: https://github.com/oantolin/embark
    - what does it do?
  - orderless: https://github.com/oantolin/orderless
    - more general searching?
  - completion in doomemacs: https://github.com/doomemacs/doomemacs/tree/master/modules/completion/vertico
    - vertico is the default
- [ ] [[https://github.com/magnars/multiple-cursors.el][multicursor]]
- [ ] [[https://tony-zorman.com/posts/phd-workflow/2022-05-01-my-phd-workflow.html][a research workflow using emacs]]
- [ ] emacs doom: https://github.com/doomemacs/doomemacs
  - a pre-configured emacs
  - the auto-completion looks really cool
- [ ] buffer tabs: how to have browser-like tabs for buffers
  - tab-bar-mode
  - tab-line-mode
- [X] check this article, https://karthinks.com/software/cavy-can-do-anything/#avy-plus-embark-any-action-anywhere
- [ ] function to delete arguments inside a parenthesis, e.g., =np.ones(data.shape[0])=, remove =data.shape[0]=
- [ ] hardcode projectile ignore files and dirs: =__pycache__, .venv=
- [ ] replace =func(a=1, b=2)= with =func(a=self.a, b=self.b)= automatically
- [ ] put parenthesis on value, e.g., /a = asdfasdfasasdfadf/ => /a = (asdfasdfasasdfadf)/
- [ ] elpy:
  - code folding is not working
  - hungry delete not usable in elpy-mode?
  - importmagic
  - in test: jump to error, or navigation in test output in general
  - key binding to yapf-fix-code
  - if a test passes, close the *compilation* buffer
  - navigate by indentation
- +ein:+
  - when open a new nb, do not open two windows
  - when closing a nb, close the window as well
  - in traceback, linkify the file names and line numbers (is there a package to do that)
  - jump to definition not working for my own functions
- [X] python in general    
  - function for =print({var}:', {var})=
  - wrap an identifier with list(..), set(..), or any function (using embark)
  - change a variable name without moving cursor (kill identifier and insert new)
- [X] shortcut to open config/settings file
- [ ] delete parenthesis by pairs
- [ ] ivy shortcut switch to multi-chars
- [ ] conditional add symbols to electricmode
  - e.g., $ should be added when in Latex, while shouldn't be in for other modes

* learning
** how to customize package variables -- use =setq=


- https://emacs.stackexchange.com/questions/44220/how-to-overwrite-a-defcustom-of-a-package-within-the-initfile
* setup
** environment variables

      #+begin_src emacs-lisp
	(setenv "PATH" (concat ":/usr/local/bin/" (getenv "PATH")))
	(add-to-list 'exec-path "/usr/local/bin/")

	(setenv "PATH" (concat ":/usr/bin/" (getenv "PATH")))
	(add-to-list 'exec-path "/usr/bin/")
   #+end_src

   #+RESULTS:
   | /usr/bin/ | /Library/TeX/texbin/ | /usr/local/bin/ | /usr/bin | /bin | /usr/sbin | /sbin | /Applications/Emacs.app/Contents/MacOS/bin-x86_64-10_14 | /Applications/Emacs.app/Contents/MacOS/libexec-x86_64-10_14 | /Applications/Emacs.app/Contents/MacOS/libexec | /Applications/Emacs.app/Contents/MacOS/bin |

** exec-path-from-shell

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :init (when (memq window-system '(mac ns x))
	    (exec-path-from-shell-initialize))
    )
#+end_src

#+RESULTS:
** compat

#+begin_src emacs-lisp
  (use-package compat
    :ensure t)
#+end_src

#+RESULTS:

* avy enhancement
- what is pop-global-mark? what does it do? (C-x C-SPC)

** customize avy-keys
  #+begin_src emacs-lisp
    (use-package avy
      :config
      (setq avy-keys '(?a ?s ?d ?f ?g ?h ?j ?l))
    )
  #+end_src

  #+RESULTS:
  : t

** kill words, lines, etc
#+begin_src emacs-lisp
  (defun avy-action-kill-whole-line (pt)
    (save-excursion
      (goto-char pt)
      (kill-whole-line))
    (select-window
     (cdr
      (ring-ref avy-ring 0)))
    t)

  (use-package avy
    :ensure t
    :config
    (setf (alist-get ?k avy-dispatch-alist) 'avy-action-kill-stay
	  (alist-get ?K avy-dispatch-alist) 'avy-action-kill-whole-line)
    ) 
#+end_src

#+RESULTS:
: avy-action-kill-whole-line

** yanking


#+begin_src emacs-lisp
  (defun avy-action-copy-whole-line (pt)
    (save-excursion
      (goto-char pt)
      (cl-destructuring-bind (start . end)
	  (bounds-of-thing-at-point 'line)
	(copy-region-as-kill start end)))
    (select-window
     (cdr
      (ring-ref avy-ring 0)))
    t)

  (defun avy-action-yank-whole-line (pt)
    (avy-action-copy-whole-line pt)
    (save-excursion (yank))
    t)

  (use-package avy
    :config
    (setf (alist-get ?y avy-dispatch-alist) 'avy-action-yank
	  (alist-get ?Y avy-dispatch-alist) 'avy-action-yank-whole-line
	  (alist-get ?w avy-dispatch-alist) 'avy-action-copy
	  (alist-get ?W avy-dispatch-alist) 'avy-action-copy-whole-line
	  )
    )
#+end_src

#+RESULTS:
: t

** teleport / transpose

=teleporting= moves sexp, e.g., =(print some-var)=, or a word , e.g., =pop-global-mark=

#+begin_src emacs-lisp
  (defun avy-action-teleport-whole-line (pt)
    (avy-action-kill-whole-line pt)
    (save-excursion (yank)) t)

  (use-package avy
    :config
    (setf (alist-get ?t avy-dispatch-alist) 'avy-action-teleport
	  (alist-get ?T avy-dispatch-alist) 'avy-action-teleport-whole-line)
    )
#+end_src

#+RESULTS:
: t

** zap to char

Kill from point up to PT.

#+begin_src emacs-lisp
  (use-package avy
    :config
    (setf (alist-get ?z avy-dispatch-alist) 'avy-action-zap-to-char)
    )
#+end_src

** mark (and activate) a candidate word or sexp

- use =m= to highlight an sexp or word, using avy-action-mark

- (the marked region is activated by default)

#+begin_src python
  exp1 = (1 + 2 + 3)
  exp2 = (4 + 5 + 6)




#+end_src

** mark the region from point to a candidate

- (it does not activate the region)

- to activate it, use =C-x C-x=

#+begin_src emacs-lisp
  (defun avy-action-mark-to-char (pt)
    (activate-mark)
    (goto-char pt))

  (use-package avy
    :config
    (setf (alist-get ?  avy-dispatch-alist) 'avy-action-mark-to-char)
    )
#+end_src

** look up the documentation for a symbol

#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :bind
    ("C-c h p" . helpful-at-point)
    )

  (defun avy-action-helpful (pt)
    (save-excursion
      (goto-char pt)
      (helpful-at-point))
    (select-window
     (cdr (ring-ref avy-ring 0)))
    t)

  (use-package avy
    :config
    (setf (alist-get ?H avy-dispatch-alist) 'avy-action-helpful)

    )
#+end_src

#+RESULTS:
: t

** embark

#+begin_src emacs-lisp
  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    )

  ;; use citar-embard to enable using citation-key as target
  (use-package citar-embark
    :ensure t
    :after citar embark
    :config (citar-embark-mode))

  (defun avy-action-embark (pt)
    (unwind-protect
	(save-excursion
	  (goto-char pt)
	  (embark-act))
      (select-window
       (cdr (ring-ref avy-ring 0))))
    t)

  (setf (alist-get ?. avy-dispatch-alist) 'avy-action-embark)
#+end_src

#+RESULTS:
: avy-action-embark

** smell test


- Switching windows multiple times to land my cursor on some text

- Isearching through more than three matches to jump to the right one

- Moving the point a long distance to run a lookup command

- Activating the mark manually (C-SPC) all the time

- Jumping to locations to delete single words

* package installers
** use-package

#+BEGIN_SRC emacs-lisp
(require 'package)


;; Adds the Melpa archive to the list of available repositories
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)

(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)

;; If there are no archived package contents, refresh them
(when (not package-archive-contents)
  (package-refresh-contents))

;; install 'use-package if not installed
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
#+END_SRC

#+RESULTS:

** quelpa

   #+begin_src emacs-lisp
     (use-package quelpa
       :ensure t)
   #+end_src

   #+RESULTS:

* appearance
** theme

#+BEGIN_SRC emacs-lisp
(use-package monokai-theme
  :ensure t
  )
#+END_SRC

#+RESULTS:

** cursor
*** beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC

#+RESULTS:

** rainbow-delimiters

   coloring parenthesis by their levels

   #+BEGIN_SRC emacs-lisp
	     (use-package rainbow-delimiters
	     :ensure t
	     :init
	     (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
	     (add-hook 'LaTeX-mode-hook #'rainbow-delimiters-mode))

	  ; or (rainbow-delimiters-mode 1) for global mode
   #+END_SRC

** rainbow

#+BEGIN_SRC emacs-lisp

(use-package rainbow-mode
:ensure t
:init (rainbow-mode 1))
#+END_SRC

** emoj

   #+begin_src emacs-lisp
     (use-package emojify
       :ensure t
       :hook (after-init . global-emojify-mode))
   #+end_src

   #+RESULTS:
   | global-emojify-mode | global-company-mode | #[0 \300 \207 [dashboard-insert-startupify-lists] 1] | tramp-register-archive-file-name-handler |

** fonts

   #+begin_src emacs-lisp
     (set-face-attribute 'default nil :height 150)
   #+end_src

   #+RESULTS:

** marked region

#+begin_src emacs-lisp
(set-face-attribute 'region nil :background "#666")
#+end_src

#+RESULTS:

* dashboard

#+begin_src emacs-lisp
  (use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-items '((projects . 10)
			  (recents . 5)))
  (setq dashboard-banner-logo-title "Hello Han."))
#+end_src

#+RESULTS:
: t

* auto completion
** +company+

#+begin_src emacs-lisp
  ;; (use-package company
  ;; :ensure t
  ;; ;; :init
  ;; ;; (add-hook 'after-init-hook 'global-company-mode)
  ;; ;; (global-set-key (kbd "<tab>") #'company-indent-or-complete-common)
  ;; ;; :bind
  ;; ;; (:map company-active-map ("<tab>" . company-complete-selection))
  ;; ) ;; global mode, do we need it

#+end_src

#+RESULTS:

should we use =auto-complete-mode=? the recommendation seems to be quite limited.



#+RESULTS
** +corfu+

it is a wrapper, which provides the UI of auto completion. the actual completion engine is determined by the mode

#+begin_src emacs-lisp
  ;; (use-package corfu
  ;;   :ensure t
  ;;   ;; Optional customizations
  ;;   :custom
  ;;   (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  ;;   (corfu-auto t)                 ;; Enable auto completion
  ;;   ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;;   ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;;   ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;;   ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;;   ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
  ;;   ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;;   ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
  ;;   ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;;   ;; Enable Corfu only for certain modes.
  ;;   ;; :hook ((prog-mode . corfu-mode)
  ;;   ;;        (shell-mode . corfu-mode)
  ;;   ;;        (eshell-mode . corfu-mode))

  ;;   ;; Recommended: Enable Corfu globally.
  ;;   ;; This is recommended since Dabbrev can be used globally (M-/).
  ;;   ;; See also `corfu-excluded-modes'.
  ;;   :init
  ;;   ;; (global-corfu-mode) ;; disable it for nowy
  ;;   )

  ;; ;; A few more useful configurations...
  ;; (use-package emacs
  ;;   :init
  ;;   ;; TAB cycle if there are only few candidates
  ;;   (setq completion-cycle-threshold 3)

  ;;   ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;;   ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;;   ;; (setq read-extended-command-predicate
  ;;   ;;       #'command-completion-default-include-p)

  ;;   ;; Enable indentation+completion using the TAB key.
  ;;   ;; `completion-at-point' is often bound to M-TAB.
  ;;   (setq tab-always-indent 'complete))
#+end_src

#+RESULTS:
** vertico (a vertical completion UI)

#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
		    (replace-regexp-in-string
		     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		     crm-separator)
		    (car args))
	    (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src

#+RESULTS:
** orderless

use space to separate the search terms

#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

#+RESULTS:
** TODO marginalia (does not quite work with =M-x=)

adds annotation in minibuffer completions
#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    :ensure t
    ;; Either bind `marginalia-cycle' globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
	   :map minibuffer-local-map
	   ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+end_src

#+RESULTS:
: marginalia-cycle

* general enhancement
** which-key
   
   shows what keys are possible given what you have already typed

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+END_SRC

#+RESULTS:

* org-mode
** basic

*** avoid opening a new window when editing a code snippet

#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window)
#+end_src

#+RESULTS:
: current-window
** org-bullets

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))

#+END_SRC

** some key bindings

   the default =C-c C-,= does not work for iTerm because it cannot send =C-,= to Emacs

   #+begin_src emacs-lisp
     ;; (define-key org-mode-map (kbd "C-c s") 'org-insert-structure-template)
   #+end_src 
** DONE hide sublevels

    #+begin_src emacs-lisp
      (defun org-hide-sublevels ()
	(interactive)
	(hide-sublevels 1))

      (global-set-key (kbd "C-c h s") 'org-hide-sublevels)


      ;; hide lists by default
      (setq org-cycle-include-plain-lists 'integrate)

      ;; hide all levels for default
      (setq org-startup-folded t)
    #+end_src

    #+RESULTS:
    : t
** programming language support

*** python

    #+begin_src emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages '((python . t)))
    #+end_src

    #+RESULTS:

** preview latex

   #+begin_src emacs-lisp
     ;; Making emacs find latex (so that C-c C-x C-l works on orgmode)
     ;; On MacOS
     (setenv "PATH" (concat ":/Library/TeX/texbin/" (getenv "PATH")))
     (add-to-list 'exec-path "/Library/TeX/texbin/")
   #+end_src

   #+RESULTS:
   | /Library/TeX/texbin/ | /Users/hanxiao/code/mz-ds-deep-learning/.venv/bin | /usr/bin | /bin | /usr/sbin | /sbin | /Applications/Emacs.app/Contents/MacOS/bin-x86_64-10_14 | /Applications/Emacs.app/Contents/MacOS/libexec-x86_64-10_14 | /Applications/Emacs.app/Contents/MacOS/libexec | /Applications/Emacs.app/Contents/MacOS/bin |

   increase font size

#+begin_src emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+end_src

#+RESULTS:
| :foreground | default | :background | default | :scale | 2.0 | :html-foreground | Black | :html-background | Transparent | :html-scale | 1.0 | :matchers | (begin $1 $ $$ \( \[) |

** DONE load predefined Latex macros

- main idea:

  - create your own .sty file and place it under the appropriate directory

  - add your package name to org-latex-packages-alist
    
- useful commands to add your own .sty files

  #+begin_src bash
    less $(kpsewhich texmf.cnf)  # to see the relevant directories
    kpsewhich -var-value=TEXMFHOME  # print the value of $TEXMFHOME

    # create the directory to store your own .sty files
    mkdir -p "$(kpsewhich -var-value=TEXMFHOME)/tex/latex"

    # make sure Latex can find your .sty file
    kpsewhich {your-script}.sty 
  #+end_src

- reference:

  - https://tex.stackexchange.com/questions/387843/where-do-i-place-my-own-sty-or-cls-files-to-make-them-available-to-all-my-te

  - https://orgmode.org/worg/org-tutorials/org-latex-preview.html


#+begin_src emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "han-macros" t))  ;; use t not nil
  ;; (print org-latex-packages-alist)
#+end_src

#+RESULTS:
|   | han-macros | t |

** image display

   #+begin_src emacs-lisp
     (setq org-image-actual-width nil)
     (pixel-scroll-mode t) ;; enable pixel scroll mode for better image viewing
   #+end_src

   #+RESULTS:
   : t

** org-journal for dairy keeping

#+begin_src emacs-lisp
  (use-package org-journal
    :ensure t
    :defer t
    :init
    ;; Change default prefix key; needs to be set before loading org-journal
    (setq org-journal-prefix-key "C-c j ")
    :config
    (setq org-journal-dir "~/org/journal/"
	  org-journal-date-format "%A, %d %B %Y"
	  org-journal-time-format "日记"))
#+end_src

#+RESULTS:
: t

** org-download

#+begin_src emacs-lisp
  (use-package org-download
    :ensure t
    :after org
    :defer nil
    :custom
    (org-download-method 'directory)
    (org-download-image-dir "images")
    (org-download-heading-lvl nil)
    (org-download-timestamp "%Y%m%d-%H%M%S_")
    (org-image-actual-width 500)
    (org-download-screenshot-method "/usr/local/bin/pngpaste %s")
    :bind
    ("C-M-y" . org-download-screenshot)
    :config
    (require 'org-download))

#+end_src

#+RESULTS:
: org-download-screenshot

** valign (visual align)

#+begin_src emacs-lisp
  (use-package valign
    :ensure t
    :after org
    ;; :config   (add-hook 'org-mode-hook #'valign-mode)
    )

#+end_src

#+RESULTS:
* markdown

  #+begin_src emacs-lisp
    (use-package markdown-mode
      :ensure t
      :mode ("README\\.md\\'" . gfm-mode)
      :init (setq markdown-command "multimarkdown"))


  #+end_src

  #+RESULTS:
  : ((\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (README\.md\' . gfm-mode) (\.yml\' . yaml-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.hva\' . latex-mode) (\.ipynb\' . ein:ipynb-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs]\.dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-bsdmake-mode) (\.make\' . makefile-bsdmake-mode) (GNUmakefile\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-bsdmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode) (\.drv\' . latex-mode))

** pandoc

   #+begin_src emacs-lisp
     (custom-set-variables
      '(markdown-command "/usr/local/bin/pandoc"))
   #+end_src

   #+RESULTS:

* file
** save last edit place
#+begin_src emacs-lisp
(save-place-mode 1)
#+end_src

#+RESULTS:
: t

** copy path of current buffer

  #+begin_src emacs-lisp
    (defun my-put-file-name-on-clipboard ()
      "Put the current file name on the clipboard"
      (interactive)
      (let ((filename (if (equal major-mode 'dired-mode)
			  default-directory
			(buffer-file-name))))
	(when filename
	  (with-temp-buffer
	    (insert filename)
	    (clipboard-kill-region (point-min) (point-max)))
	  (message filename))))
  #+end_src

  #+RESULTS:
  : my-put-file-name-on-clipboard
** shortcut: open dairy file

   #+begin_src emacs-lisp
     (defun dairy-org-visit ()
     "visit ~/docs/notes/dairy2023.org"
     (interactive)
     (find-file "~/docs/notes/dairy2023.org"))
     (global-set-key (kbd "C-c o d") 'dairy-org-visit)
   #+end_src   

   #+RESULTS:
   : dairy-org-visit

** shortcut: open note for interpretable ML file
   #+begin_src emacs-lisp
     (defun corset-org-visit ()
     "visit ~/docs/notes/corset2.0.org"
     (interactive)
     (find-file "~/docs/notes/corset2.0.org"))

     (global-set-key (kbd "C-c o c") 'corset-org-visit)
   #+end_src   

   #+RESULTS:
   : corset-org-visit

** shortcut: open songs.org

   #+begin_src emacs-lisp
     (defun songs-org-visit ()
     "visit ~/docs/notes/songs.org"
     (interactive)
     (find-file "~/docs/notes/songs.org"))
     (global-set-key (kbd "C-c o s") 'songs-org-visit)
   #+end_src   

   #+RESULTS:
   : songs-org-visit

** dired-subtree

   #+begin_src emacs-lisp
     (use-package dired-subtree
       :ensure t)
   #+end_src

   #+RESULTS:

** dired-filter

   #+begin_src emacs-lisp
     (use-package dired-filter
       :ensure t)
   #+end_src

   #+RESULTS:
** dired: omit certain file types

#+begin_src emacs-lisp
  (setq dired-omit-files
	(concat dired-omit-files "\\|^\\.ipynb_checkpoints$\\|^\\.pytest_cache$\\|^\\.venv$\\|^\\.git$\\|^\\_\\_pycache\\_\\_$"))
#+end_src




** neotree

   #+begin_src emacs-lisp
     (use-package neotree
       :ensure t
       :init
       (setq neo-window-width 30)
       )
   #+end_src

   #+RESULTS:

** open file at cursor

   #+begin_src emacs-lisp
     (defun my-open-file-at-cursor ()
       "Open the file path under cursor.
     If there is text selection, uses the text selection for path.
     If the path starts with “http://”, open the URL in browser.
     Input path can be {relative, full path, URL}.
     Path may have a trailing “:‹n›” that indicates line number, or “:‹n›:‹m›” with line and column number. If so, jump to that line number.
     If path does not have a file extension, automatically try with “.el” for elisp files.
     This command is similar to `find-file-at-point' but without prompting for confirmation.

     URL `http://xahlee.info/emacs/emacs/emacs_open_file_path_fast.html'
     Version 2020-10-17"
       (interactive)
       (let* (
	      ($inputStr
	       (if (use-region-p)
		   (buffer-substring-no-properties (region-beginning) (region-end))
		 (let ($p0 $p1 $p2
			   ;; chars that are likely to be delimiters of file path or url, e.g. whitespace, comma. The colon is a problem. cuz it's in url, but not in file name. Don't want to use just space as delimiter because path or url are often in brackets or quotes as in markdown or html
			   ($pathStops "^  \t\n\"`'‘’“”|[]{}「」<>〔〕〈〉《》【】〖〗«»‹›❮❯❬❭〘〙·。\\"))
		   (setq $p0 (point))
		   (skip-chars-backward $pathStops)
		   (setq $p1 (point))
		   (goto-char $p0)
		   (skip-chars-forward $pathStops)
		   (setq $p2 (point))
		   (goto-char $p0)
		   (buffer-substring-no-properties $p1 $p2))))
	      ($path
	       (replace-regexp-in-string
		"^file:///" "/"
		(replace-regexp-in-string
		 ":\\'" "" $inputStr))))
	 (if (string-match-p "\\`https?://" $path)
	     (if (fboundp 'xahsite-url-to-filepath)
		 (let (($x (xahsite-url-to-filepath $path)))
		   (if (string-match "^http" $x )
		       (browse-url $x)
		     (find-file $x)))
	       (progn (browse-url $path)))
	   (progn ; not starting “http://”
	     (if (string-match "#" $path )
		 (let (
		       ( $fpath (substring $path 0 (match-beginning 0)))
		       ( $fractPart (substring $path (1+ (match-beginning 0)))))
		   (if (file-exists-p $fpath)
		       (progn
			 (find-file $fpath)
			 (goto-char (point-min))
			 (search-forward $fractPart ))
		     (when (y-or-n-p (format "file no exist: 「%s」. Create?" $fpath))
		       (find-file $fpath))))
	       (if (string-match "^\\`\\(.+?\\):\\([0-9]+\\)\\(:[0-9]+\\)?\\'" $path)
		   (let (
			 ($fpath (match-string 1 $path))
			 ($line-num (string-to-number (match-string 2 $path))))
		     (if (file-exists-p $fpath)
			 (progn
			   (find-file $fpath)
			   (goto-char (point-min))
			   (forward-line (1- $line-num)))
		       (when (y-or-n-p (format "file no exist: 「%s」. Create?" $fpath))
			 (find-file $fpath))))
		 (if (file-exists-p $path)
		     (progn ; open f.ts instead of f.js
		       (let (($ext (file-name-extension $path))
			     ($fnamecore (file-name-sans-extension $path)))
			 (if (and (string-equal $ext "js")
				  (file-exists-p (concat $fnamecore ".ts")))
			     (find-file (concat $fnamecore ".ts"))
			   (find-file $path))))
		   (if (file-exists-p (concat $path ".el"))
		       (find-file (concat $path ".el"))
		     (when (y-or-n-p (format "file no exist: 「%s」. Create?" $path))
		       (find-file $path ))))))))))

     (global-set-key (kbd "C-c o f") 'my-open-file-at-cursor)
   #+end_src

   #+RESULTS:
   : my-open-file-at-cursor

* bookmarks
** useful commands

- C-x r l: list bookmarks
- C-x r b: jump to bookmark

** bookmark-view

   #+begin_src emacs-lisp
     (use-package bookmark-view
       :ensure t
       )
   #+end_src

   #+RESULTS:

* window
** switch-window

let's not use it for now since it works better for => 2= windows.

#+BEGIN_SRC emacs-lisp
  (use-package switch-window

    :ensure t
    :init
    (global-set-key (kbd "C-x o") 'switch-window)
    (global-set-key (kbd "C-x 1") 'switch-window-then-maximize)
    (global-set-key (kbd "C-x 2") 'switch-window-then-split-below)
    (global-set-key (kbd "C-x 3") 'switch-window-then-split-right)
    (global-set-key (kbd "C-x 0") 'switch-window-then-delete)

    (global-set-key (kbd "C-x 4 d") 'switch-window-then-dired)
    (global-set-key (kbd "C-x 4 f") 'switch-window-then-find-file)
    (global-set-key (kbd "C-x 4 m") 'switch-window-then-compose-mail)
    (global-set-key (kbd "C-x 4 r") 'switch-window-then-find-file-read-only)

    (global-set-key (kbd "C-x 4 C-f") 'switch-window-then-find-file)
    (global-set-key (kbd "C-x 4 C-o") 'switch-window-then-display-buffer)

    (global-set-key (kbd "C-x 4 0") 'switch-window-then-kill-buffer))

    (setq switch-window-threshold 2)
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-shortcut-style 'qwerty)
#+END_SRC

#+RESULTS:
: qwerty

** window splitting and following

   #+begin_src emacs-lisp
   (defun split-window-and-follow-vertically ()
   (interactive)
   (split-window-below)
   (balance-windows)
   (other-window 1))
   (global-set-key (kbd "C-x 2") 'split-window-and-follow-vertically)

   (defun split-window-and-follow-horizontally ()
   (interactive)
   (split-window-right)
   (balance-windows)
   (other-window 1))
   (global-set-key (kbd "C-x 3") 'split-window-and-follow-horizontally)
   #+end_src
   #+end_src
   
* buffers

** ibuffer
   

   some goodies: use =p= and =n= to move up and down

 #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x C-b") 'ibuffer)
 #+END_SRC

** expert mode

   do not ask for confirmation when killing buffers

#+BEGIN_SRC emacs-lisp
(setq ibuffer-expert t)
#+END_SRC

#+RESULTS:
: t
** kill current buffer and close the window

   #+begin_src emacs-lisp
	(defun kill-and-close-this-buffer ()
	  (interactive)
	  (kill-this-buffer)
	  (delete-window))

	(global-set-key (kbd "C-c k") 'kill-and-close-this-buffer)
   #+end_src

   #+RESULTS:
   : kill-and-close-this-buffer
** kill all buffers

   #+begin_src emacs-lisp
   (defun kill-all-buffers ()
   (interactive)
   (mapc 'kill-buffer (buffer-list)))
   (global-set-key (kbd "C-M-k") 'kill-all-buffers)
   #+end_src

   #+RESULTS:
   : kill-all-buffers
* projectile
** install
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1)
    )
#+END_SRC

#+RESULTS:
: consult-find

** set project type to python-pip

   #+begin_src emacs-lisp
     (defun projectile-project-type-to-python-pip ()
       (interactive)
       (setq projectile-project-type 'python-pip)
       )
     (global-set-key (kbd "C-c t p p") 'projectile-project-type-to-python-pip)

   #+end_src

   #+RESULTS:
   : projectile-project-type-to-python-pip

* IDO 
** preparation and ignore files

#+BEGIN_SRC emacs-lisp
  (use-package ido
    :ensure t
    :config
    (setq ido-enable-flex-matching nil
	  ido-create-new-buffer 'always
	  ido-everywhere t)
    (add-to-list 'ido-ignore-files "\.bak")
    (add-to-list 'ido-ignore-files "\.log")
    (add-to-list 'ido-ignore-files ".venv")
    (add-to-list 'ido-ignore-files "__pycache__")
    (add-to-list 'ido-ignore-files "\.pytest_cache")
    (add-to-list 'ido-ignore-files "\.pkl")
  ; data files
    (add-to-list 'ido-ignore-files "\.hdf5")
  ; latex-related
    (add-to-list 'ido-ignore-files "\.nav")
    (add-to-list 'ido-ignore-files "\.out")
    (add-to-list 'ido-ignore-files "\.pdf")
    (add-to-list 'ido-ignore-files "\.snm")
    (add-to-list 'ido-ignore-files "\.synctex.gz")    
    (ido-mode 1)
    )
#+END_SRC

#+RESULTS:
: t
** vertical IDO

   #+BEGIN_SRC  emacs-lisp
     (use-package ido-vertical-mode
       :ensure t
       :requires ido
       :config
       (ido-vertical-mode 1)
       (setq ido-vertical-define-keys 'C-n-and-C-p-only)
       )   
   #+END_SRC

   #+RESULTS:
   : t

** +smex+
   
#+BEGIN_SRC emacs-lisp
  ;; (use-package smex
  ;;   :ensure t
  ;;   :init (smex-initialize)
  ;;   :bind
  ;;   ("M-x" . smex))
#+END_SRC

** buffer switching

#+BEGIN_SRC emacs-lisp
  ;; (global-set-key (kbd "C-x b") 'ido-switch-buffer)
  (global-set-key (kbd "C-x b") 'consult-buffer)
#+END_SRC

#+RESULTS:
: consult-buffer
* cursor navigation

** avy

#+BEGIN_SRC emacs-lisp
(use-package avy
:ensure t
:bind
("M-s" . avy-goto-char-timer))
#+END_SRC

#+RESULTS:
: avy-goto-char

* sublimity (make it work)
  
#+begin_src emacs-lisp
	  ;; (use-package sublimity
	  ;;   :ensure t
	  ;;   :config
	  ;;   (sublimity-mode 1))

	  ;; (use-package sublimity-scroll
	  ;;   :ensure t
	  ;;   :config
	  ;;   (sublimity-mode 1))
  ;; (require 'sublimity)
  ;; (require 'sublimity-scroll)
  ;; (sublimity-mode 1)
	;; (require 'sublimity-scroll)


#+end_src

#+RESULTS:
: t

why not showing in non-GUI Emacs?

#+RESULTS:
: t

* Python
** activate virtualenv

   #+begin_src emacs-lisp
     (defun activate-virtualenv ()
       "pyenv-activate the current directory + '.venv'
	 in the future, the name of virtualenv should be specified as input
	 "
       (interactive)
       (message "activating virtualenv")
       (pyvenv-activate
	(expand-file-name
	 ".venv" default-directory))
       (setq elpy-rpc-virtualenv-path 'current)  ; set path to Python interpreter correctly
       )

     (global-set-key (kbd "C-c a v") 'activate-virtualenv)
   #+end_src

   #+RESULTS:
   : activate-virtualenv
   
** flycheck

   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t)
   #+end_src

   #+RESULTS:

** ein

#+BEGIN_SRC emacs-lisp
  (use-package ein
    :ensure t
    :custom
    ;; use below to show inline images
    ;; reference: https://github.com/peterewills/emacs-ipython-notebook
    (ein:output-area-inlined-images t) ;; not necessary in older versions
    (ein:slice-image t)
    (pixel-scroll-mode t) ;; enable pixel scroll mode for better image viewing
    )

#+END_SRC

#+RESULTS:
: t

** elpy

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :config
    (elpy-enable)
    (setq elpy-test-runner 'elpy-test-pytest-runner ; use pytest
	  elpy-rpc-backend "jedi"
	  ;; elpy-rpc-project-specific 't
	  elpy-modules (delq 'elpy-module-flymake elpy-modules)
	  )
    (add-hook 'elpy-mode-hook 'flycheck-mode)
    :bind
    ;; remap the keys for some navigation functions
    ("C-s-n" . 'elpy-nav-forward-block)
    ("C-s-p" . 'elpy-nav-backward-block)
    ("C-s-f" . 'elpy-nav-forward-indent)
    ("C-s-b" . 'elpy-nav-backward-indent)
    )


#+END_SRC

#+RESULTS:
: elpy-nav-backward-indent
** elpy tips

*** navigation
      
   - =M-.= and =M-,= to goto-def and goback
   - =C-c C-o= to list all functions
   - =M-?= to search for symbols in the current project

*** syntax checking

    - =C-c C-v=: list the errors/warnings (if any) in another window
** cython

   #+begin_src emacs-lisp
     (use-package cython-mode
       :ensure t)
   #+end_src

   #+RESULTS:

* LaTex
** preparation
  #+begin_src emacs-lisp
    (use-package tex
      :defer t
      :ensure auctex
      :config
      (setq TeX-auto-save t)
      (setq TeX-save-query nil)
      )

; for MacOS: environment variable fix 
    (setenv "PATH" 
	    (concat
	      "/usr/local/bin/" ":" "/Library/TeX/texbin/" ":"
	      (getenv "PATH")))
  #+end_src

  #+RESULTS:
  : /usr/local/bin/:/Library/TeX/texbin/:/Users/hanxiao/code/mz-re-ml-new/.venv/bin:/Users/hanxiao/code/mz-re-ml-new/.venv/bin:/Users/hanxiao/google-cloud-sdk/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/TeX/texbin:/usr/local/munki:/Library/TeX/texbin/

** source correlation with external PDF viewer

#+begin_src emacs-lisp
					  ; forward/reverse search between PDF and Latex source
  (defun my/latex-buffer-setup ()
    (TeX-source-correlate-mode)
    (TeX-PDF-mode))

  (add-hook 'LaTeX-mode-hook 'my/latex-buffer-setup)
  (setq TeX-source-correlate-method 'synctex
	TeX-view-program-list   ;; Use Skim, it's awesome
	'(("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline -g -b %n %o %b"))
	TeX-view-program-selection '((output-pdf "Skim"))
	TeX-auto-save t
	TeX-parse-self t
	TeX-save-query nil
	;; TeX-master 'dwim
	)

  (setq-default TeX-master "main") ; all master files called "main".
  ;; (setq-default TeX-master "sn-article") ; all master files called "sn-article".
  ;; (setq-default TeX-master "cover") ; all master files called "cover".
#+end_src

#+RESULTS:
: main

** TODO unbind keybindings

#+begin_src emacs-lisp
  ;; (add-hook latex-mode-hook
  ;; 	  (lambda()
  ;; 	    (local-unset-key (kbd "C-M-a"))))

  (add-hook 'LaTex-mode-hook
	    (lambda()
	      (define-key LaTex-mode-map (kbd "C-M-a") nil)))
#+end_src

#+RESULTS:
| lambda | nil | (define-key LaTex-mode-map (kbd C-M-a) nil) |
| lambda | nil | (define-key latex-mode-map (kbd C-M-a) nil) |

** text manipulation
*** wrap by href

#+begin_src emacs-lisp
  (defun wrap-by-href ()
    "wrap a text by by \\href"
    (interactive)
    (save-excursion
      (goto-char (region-beginning))
      (insert (concat "\\href{}{")))
    (save-excursion
      (goto-char (region-end))
      (insert "}"))
    (goto-char (+ (region-beginning) 6)) ; go to the first {} to insert the link
    )


  ;; how to define the key only for latex mode?
  ;; tried to the following
  ;; (add-hook 'LaTeX-mode-hook
  ;; 	  (lambda () (local-set-key (kbd "C-c h r") #'wrap-by-href)))
  ;; (eval-after-load 'latex 
  ;;   '(define-key LaTeX-mode-map [(kbd "C-c h r")] 'wrap-by-href))
  (global-set-key (kbd "C-c h r") 'wrap-by-href)

#+end_src

#+RESULTS:
: wrap-by-href

** [[https://github.com/emacs-citar/citar][citar]]

#+begin_src emacs-lisp
  (use-package citar
    :ensure t

    :hook
    (LaTeX-mode . citar-capf-setup)
    (org-mode . citar-capf-setup)
    )


#+end_src

#+RESULTS:
| citar-capf-setup | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | (lambda nil (org-bullets-mode)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |


* other languages
** Matlab

need to install matlab-mode manually, 
package-install does not work for now

#+BEGIN_SRC emacs-lisp
  (when (and (eq system-type 'gnu/linux)
	     (file-exists-p "/home/xiaoh1/code/matlab-emacs-src"))
    (add-to-list 'load-path "/home/xiaoh1/code/matlab-emacs-src")
    (load-library "matlab-load"))

#+END_SRC

#+RESULTS:
  
** YAML mode

   #+BEGIN_SRC emacs-lisp   
   (use-package yaml-mode
   :ensure t
   :config
   (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
   )
   #+END_SRC
** dockerfile mode

   #+begin_src emacs-lisp
     (use-package dockerfile-mode
       :ensure t)
   #+end_src

* yasnippet
** preparation

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (setq yas-snippet-dirs
	  '("~/.emacs.d/snippets"
	    "~/.emacs.d/elpa/yasnippet-snippets-20230220.1659/snippets/"
	    "~/.emacs.d/elpa/yasnippet-snippets-20230227.1504/snippets"
	    ))
    ;; "~/.emacs.d/elpa/elpy-20220220.2059/"  ; might need to change
    ;; "~/.emacs.d/elpa/yasnippet-snippets-20220221.1234/snippets"  ; might need to change  
    (yas-global-mode 1)
    )
#+END_SRC

#+RESULTS:
: t

** add some off-the-shelf snippets by the community

   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet-snippets
   :ensure t
   )
   #+END_SRC

   #+RESULTS:

* config reload/edit
** config edit
#+BEGIN_SRC emacs-lisp
(defun config-visit ()
"visit ~/.emacs.d/config.org"
(interactive)
(find-file "~/.emacs.d/config.org"))
(global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC

#+RESULTS:
: config-visit

** config reload

#+BEGIN_SRC emacs-lisp
(defun config-reload ()
  "Reloads ~/.emacs.d/config.org at runtime"
  (interactive)
  (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
(global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

#+RESULTS:
: config-reload

** open ~/.zshrc file

   #+begin_src emacs-lisp
     (defun zshrc-visit ()
       "visit ~/.zshrc"
       (interactive)
       (find-file "~/.zshrc"))
     (global-set-key (kbd "C-c z") 'zshrc-visit)   

   #+end_src

* terminals
** TODO multi-term

#+begin_src emacs-lisp
  (use-package multi-term
    :ensure t
    :config (setq multi-term-program "/bin/zsh")
    :bind ("C-c m t" . 'multi-term)
    )
#+end_src

#+RESULTS:
: multi-term

how to avoid re-opening a new terminal?

#+RESULTS:
: multi-term

#+begin_src emacs-lisp

#+end_src

** shell-mode

#+begin_src emacs-lisp
(global-set-key (kbd "C-c s h")  'shell)
#+end_src

#+RESULTS:
: shell


** zsh
#+BEGIN_SRC emacs-lisp  
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)  
#+END_SRC

#+RESULTS:
: ansi-term

** corfu-terminal (with auto-completion)

#+begin_src emacs-lisp


  (quelpa '(popon
	    :fetcher git
	    :url "https://codeberg.org/akib/emacs-popon.git"))



  (quelpa '(corfu-terminal
	    :fetcher git
	    :url "https://codeberg.org/akib/emacs-corfu-terminal.git"))
#+end_src

#+RESULTS:

* miscellenous
** show line/column number

#+begin_src emacs-lisp
(line-number-mode 1)
(column-number-mode 1)
#+end_src
** not sorted yet

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o")  'mode-line-other-buffer)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (when window-system
    (scroll-bar-mode -1))


  (setq split-width-threshold 1 )   ; horizontal split window

  (defalias 'yes-or-no-p 'y-or-n-p)



  (setq scroll-conservatively 100)


  (setq inhibit-startup-message t)

  (setq ring-bell-function 'ignore) ; no warning sound

  (when window-system
    (global-hl-line-mode t)
    (global-prettify-symbols-mode t)
    )

  (setq make-backup-files nil)
  (setq auto-save-default nil)


  (show-paren-mode 1)

#+END_SRC

#+RESULTS:
: t
* text maniputation
** line/region copying/deletion

#+begin_src emacs-lisp
  ;; (global-set-key (kbd "C-c w l") 'avy-copy-line)  ; copy a line
  (global-set-key (kbd "C-c w r") 'avy-copy-region)  ; copy a region
  ;; (global-set-key (kbd "C-c d l") 'avy-kill-whole-line)  ; kill&save a line
  (global-set-key (kbd "C-c d r") 'avy-kill-region)  ; kill&save a region
#+end_src

#+RESULTS:
: avy-kill-region
** subword

when pressing =M-f= or =M-b= in camel-case strings, e.g., ThisIsAWord, move /subword/.

#+begin_src emacs-lisp
(global-subword-mode 1)
#+end_src

#+RESULTS:

** electric pair mode

#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\{ . ?\})
			      ;; (?\' . ?\')  ; 
			      (?\" . ?\")
			      (?\` . ?\`)
			      ;; (?\$ . ?\$)
  ))
  (electric-pair-mode t)
#+end_src

#+RESULTS:
: t

** kill-whole-word and kill-whole-line

#+begin_src emacs-lisp
  (defun kill-current-word ()
    "kill the current word"
    (interactive)
    (backward-word)
    (kill-word 1)
    )

  (defun kill-current-sexp ()
    "kill the current sexp"
    (interactive)
    (backward-sexp)
    (kill-sexp 1)
    )


  (defun kill-current-line ()
    "kill the current line"
    (interactive)
    (move-beginning-of-line 1)
    (kill-whole-line)  ;; kill-line does not kill the \n
    (previous-line)
    )

  ;; to override major-mode keybindings (e.g., C-c C-k in org-mode is used)
  (bind-keys*
   ("C-c C-k C-w" . kill-current-word)
   ("C-c C-k C-l" . kill-current-line)
   ("C-c C-k C-s" . kill-current-sexp) 
   )
#+end_src

#+RESULTS:
: kill-current-sexp
** copy-whole-word

#+begin_src emacs-lisp
  (defun get-point (symbol &optional arg)
    "get the point"
    (funcall symbol arg)
    (point))

  (defun copy-thing (begin-of-thing end-of-thing &optional arg)
    "Copy thing between beg & end into kill ring."
    (save-excursion
      (let ((beg (get-point begin-of-thing 1))
	    (end (get-point end-of-thing arg)))
	(copy-region-as-kill beg end))))

  (defun my-copy-word (&optional arg)
    "Copy words at point into kill-ring"
    (interactive "P")
    (copy-thing 'backward-word 'forward-word arg)
    ;;(paste-to-mark arg)
    )
  (global-set-key (kbd "C-c c w") 'my-copy-word)
#+end_src

#+RESULTS:
: my-copy-word

** copy-whole-line

   #+begin_src emacs-lisp
     (defun copy-whole-line ()
       (interactive)
       (save-excursion
	 (kill-new
	  (buffer-substring
	   (point-at-bol)
	   (point-at-eol))))
       (message "a line is copied")
       )
     (global-set-key (kbd "C-c w l") 'copy-whole-line)
   #+end_src

   #+RESULTS:
   : copy-whole-line

** hungry-delete

#+begin_src emacs-lisp
(use-package hungry-delete
:ensure t
:config (global-hungry-delete-mode))
#+end_src

#+RESULTS:
: t

** +delete a pair (of parenthesis, bracket, etc)+

#+begin_src emacs-lisp
  ;; (global-set-key (kbd "C-c d p") 'delete-pair)
#+end_src

#+RESULTS:
: delete-pair

** ❤ copy chunk at point

   - test example: output_dir: gs://unity-ads-dd-ds-pRd-models/tfrecords/skad_c2ip/
   
   #+begin_src emacs-lisp
     (defun copy-chunk-at-point ()
       "copy a path at point if it exists."
       (interactive)
       (let* (
	      ($inputStr
	       (if (use-region-p)
		   (buffer-substring-no-properties (region-beginning) (region-end))
		 (let ($p0 $p1 $p2
			   ;; chars that are likely to be delimiters of file path or url, e.g. whitespace, comma. The colon is a problem. cuz it's in url, but not in file name. Don't want to use just space as delimiter because path or url are often in brackets or quotes as in markdown or html
			   ($pathStops "^  \t\n\"`'‘’“”|[]{}「」<>〔〕〈〉《》【】〖〗«»‹›❮❯❬❭〘〙·。\\"))
		   (setq $p0 (point))
		   (skip-chars-backward $pathStops)
		   (setq $p1 (point))
		   (goto-char $p0)
		   (skip-chars-forward $pathStops)
		   (setq $p2 (point))
		   (goto-char $p0)
		   (buffer-substring-no-properties $p1 $p2))))
	      ($path
	       (replace-regexp-in-string
		"^file:///" "/"
		(replace-regexp-in-string
		 ":\\'" "" $inputStr))))
	 (with-temp-buffer
	   (insert $inputStr)
	   (clipboard-kill-region (point-min) (point-max)))
	 (message (format "copied '%s'" $inputStr))
	 ))
     (global-set-key (kbd "C-c c c") 'copy-chunk-at-point)
   #+end_src

   #+RESULTS:
   : copy-chunk-at-point

** TODO 🥑 surround text chunk by single-quote, double-quote, caret, etc (half done)

   #+begin_src emacs-lisp
	  (defun surround-chunk-by-stuff ($stuff-to-insert)
	    "surround a text chunk by single quote"
	    ;; (interactive)
	    (if (use-region-p)
		(buffer-substring-no-properties (region-beginning) (region-end))
	      (let ($curPos $startPos $endPos
			    $startStuff $endStuff
			    ;; chars that are likely to be delimiters of file path or url, e.g. whitespace, comma. The colon is a problem. cuz it's in url, but not in file name. Don't want to use just space as delimiter because path or url are often in brackets or quotes as in markdown or html
			    ($pathStops "^  \t\n\"`'‘’“”|[]{}「」<>〔〕〈〉《》【】〖〗«»‹›❮❯❬❭〘〙·。\\")
			    ;; ($stuff-to-insert (read-string "what string?"))
			    )
		;; try to support different start and end chars, eg parenthesis and brackets
		;; however, it shows:
		;; if: Symbol’s value as variable is void: $sutff-to-insert
		(setq $startStuff $stuff-to-insert)
		(setq $endStuff $stuff-to-insert)
		;; (message "here! before if")	   
		;; (if (string= $sutff-to-insert "<")
		;;     (progn
		;; 	 (setq $startStuff "<")
		;; 	 (setq $endStuff ">"))
		;;   (if (string= $stuff-to-insert "(")
		;; 	 (progn
		;; 	   (setq $startStuff "(")
		;; 	   (setq $startStuff ")"))
		;;     (if (string= $stuff-to-insert "{")
		;; 	   (progn
		;; 	   (setq $startStuff "{")
		;; 	   (setq $startStuff "}"))
		;; 	 (if (string= $stuff-to-insert "[")
		;; 	   (progn
		;; 	   (setq $startStuff "[")
		;; 	   (setq $startStuff "]"))
		;; 	   (progn
		;; 	     (message "here!")
		;; 	     (setq $startStuff '$stuff-to-insert)
		;; 	     (setq $startStuff '$stuff-to-insert)))
		;; 	 ))
		;;     )	   
		;; save current position
		(setq $curPos (point))
		;; get start position of the chunk
		(skip-chars-backward $pathStops)
		(insert $startStuff)
		(setq $startPos (point))
		;; get stop position of the chunk
		(goto-char $curPos)
		(skip-chars-forward $pathStops)
		(setq $endPos (point))
		(insert $endStuff)
		;; back to original position
		(goto-char $curPos)
		)
	      )
	    )

	  (defun surround-chunk-by-single-quote ()
	    (interactive)
	    (surround-chunk-by-stuff "'"))

	  (defun surround-chunk-by-double-quote ()
	    (interactive)
	    (surround-chunk-by-stuff "\""))

	  (defun surround-chunk-by-back-tick ()
	    (interactive)
	    (surround-chunk-by-stuff "`"))

	  (defun surround-chunk-by-dollar ()
	    (interactive)
	    (surround-chunk-by-stuff "$"))



	  (global-set-key (kbd "C-c s '") 'surround-chunk-by-single-quote)
	  (global-set-key (kbd "C-c s \"") 'surround-chunk-by-double-quote)
	  (global-set-key (kbd "C-c s $") 'surround-chunk-by-dollar)
	  (global-set-key (kbd "C-c s `") 'surround-chunk-by-back-tick)
   #+end_src

   #+RESULTS:
   : surround-chunk-by-back-tick

** COMMENT smartparen

   [[https://github.com/Fuco1/smartparens#getting-started][more docs]] and [[https://ebzzry.com/en/emacs-pairs/#wrapping][a tutorial]]

#+begin_src emacs-lisp
  (use-package smartparens-config
    :ensure smartparens
    :config (progn (show-smartparens-global-mode t)))

  (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
  (add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)

  (global-set-key (kbd "C-M-a") 'sp-beginning-of-sexp)
  (global-set-key (kbd "C-M-e") 'sp-end-of-sexp)
  ;; (global-set-key (kbd "C-down") 'sp-down-sexp)
#+end_src

#+RESULTS:
| lambda | nil | (local-unset-key (kbd C-M-a)) |

** copy file and line

#+begin_src emacs-lisp
(defun copy-current-line-position-to-clipboard ()
  "Copy current line in file to clipboard as '</path/to/file>:<line-number>'."
  (interactive)
  (let ((path-with-line-number
         (concat (buffer-file-name) "::" (number-to-string (line-number-at-pos)))))
    (kill-new path-with-line-number)
    (message (concat path-with-line-number " copied to clipboard"))))
#+end_src

#+RESULTS:
: copy-current-line-position-to-clipboard

* mode line
** spaceline

#+begin_src emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+end_src

** diminish

#+begin_src emacs-lisp
  (use-package diminish
    :ensure t
    :init 
    (diminish 'hungry-delete-mode)
    (diminish 'which-key-mode)
    (diminish 'rainbow-mode)
    (diminish 'beacon-mode)
    (diminish 'subword-mode)
    )
#+End_src

#+RESULTS:

* dmenu (run a command in shell)


#+begin_src emacs-lisp
(use-package dmenu
    :ensure t
    :bind
    ("C-c d m" . 'dmenu))
#+end_src

#+RESULTS:
: dmenu
* TODO searching
** text search
  #+begin_src  emacs-lisp
	(use-package swiper
	  :ensure t
	  :bind
	  ("C-s" . swiper))
  #+end_src

  #+RESULTS:
  : swiper

** [[https://github.com/minad/consult][consult]] 

Consult provides search and navigation commands

#+begin_src emacs-lisp
  (use-package consult
    :ensure t

    :bind ("C-c p f" . 'consult-find)  ;; find file
    :bind ("C-c i m" . 'consult-imenu) ;;  find functions, classes, etc in Python script, or headings in org
    )
#+end_src

#+RESULTS:
: consult-imenu

** search in the other window

#+begin_src emacs-lisp
  (defun swiper-forward-other-window (prefix)
      "Function to swiper-forward in other-window."
      (interactive "P")
      (unless (one-window-p)
	(save-excursion
	  (let ((next (if prefix -1 1)))
	    (other-window next)
	    (swiper-isearch)
	    (other-window (- next))))))

  (defun swiper-backward-other-window (prefix)
    "Function to swiper-backward in other-window."
    (interactive "P")
    (unless (one-window-p)
      (save-excursion
	(let ((next (if prefix 1 -1)))
	  (other-window next)
	  (swiper-backward)
	  (other-window (- next))))))

  (define-key global-map (kbd "C-M-s") 'swiper-forward-other-window)
  (define-key global-map (kbd "C-M-r") 'swiper-backward-other-window)

#+end_src

#+RESULTS:
: swiper-backward-other-window

* magit (version control)

   #+begin_src emacs-lisp
     (use-package magit
       :ensure t)
   #+end_src

   #+RESULTS:

** instructions

- use =C-c C-c= to show all Git operations
  
* music player (simple-mpc)

#+begin_src emacs-lisp
  (use-package simple-mpc
    :ensure t)
#+end_src

#+RESULTS:
