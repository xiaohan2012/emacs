* wish list
- key binding to yapf-fix-code
- function to delete arguments inside a parenthesis, e.g., =np.ones(data.shape[0])=, remove =data.shape[0]=
- elpy test jump to error, or navigation in test output in general
- importmagic in python
- hardcode projectile ignore files and dirs: =__pycache__, .venv=
- hungry delete not usable in elpy-mode?
- replace =func(a=1, b=2)= with =func(a=self.a, b=self.b)= automatically
- put parenthesis on value, e.g., /a = asdfasdfasasdfadf/ => /a = (asdfasdfasasdfadf)/
- ein:
  - when open a new nb, do not open two windows
  - when closing a nb, close the window as well
  - bg color (yellowish) in traceback
  - in traceback, linkify the file names and line numbers (is there a package to do that)
  - jump to definition not working
- print('prev_layers:', prev_layers)
- version control my yasnippets
* use-package

#+BEGIN_SRC emacs-lisp
(require 'package)


;; Adds the Melpa archive to the list of available repositories
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)

(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)

;; If there are no archived package contents, refresh them
(when (not package-archive-contents)
  (package-refresh-contents))

;; install 'use-package if not installed
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
#+END_SRC

#+RESULTS:

* appearance
** theme

#+BEGIN_SRC emacs-lisp
(use-package monokai-theme
  :ensure t
  )
#+END_SRC

#+RESULTS:

** cursor
*** beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC

#+RESULTS:

** rainbow-delimiters

   coloring parenthesis by their levels

   #+BEGIN_SRC emacs-lisp
   (use-package rainbow-delimiters
   :ensure t
   :init
   (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))   
; or (rainbow-delimiters-mode 1) for global mode
   #+END_SRC

** rainbow

#+BEGIN_SRC emacs-lisp

(use-package rainbow-mode
:ensure t
:init (rainbow-mode 1))
#+END_SRC

* dashboard

#+begin_src emacs-lisp
  (use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-items '((recents . 10)
			  (projects . 3)))
  (setq dashboard-banner-logo-title "Hello Han."))
#+end_src

#+RESULTS:
: t

* auto completion

** company

#+begin_src emacs-lisp
(use-package company
:ensure t
:init
(add-hook 'after-init-hook 'global-company-mode)) ;; global mode, do we need it
#+end_src

#+RESULTS:

should we use =auto-complete-mode=? the recommendation seems to be quite limited.



#+RESULTS
* general enhancement
** which-key
   
   shows what keys are possible given what you have already typed

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))

#+END_SRC

* ORG
** basic

*** avoid opening a new window when editing a code snippet

#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window)
#+end_src

#+RESULTS:
: current-window
** org-bullets

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))

#+END_SRC

** some key bindings

   the default =C-c C-,= does not work for iTerm because it cannot send =C-,= to Emacs

   #+begin_src emacs-lisp
     ;; (define-key org-mode-map (kbd "C-c s") 'org-insert-structure-template)
   #+end_src 
** DONE hide sublevels (does not work on Mac)

    #+begin_src emacs-lisp
      (defun org-hide-sublevels ()
	(interactive)
	(hide-sublevels 1))

      (global-set-key (kbd "C-c h s") 'org-hide-sublevels)

    #+end_src

    #+RESULTS:
    : org-hide-sublevels

* window

** switch-window

let's not use it for now since it works better for => 2= windows.

#+BEGIN_SRC emacs-lisp
  ;; (use-package switch-window

  ;;   :ensure t
  ;;   :init
  ;;   (global-set-key (kbd "C-x o") 'switch-window)
  ;;   (global-set-key (kbd "C-x 1") 'switch-window-then-maximize)
  ;;   (global-set-key (kbd "C-x 2") 'switch-window-then-split-below)
  ;;   (global-set-key (kbd "C-x 3") 'switch-window-then-split-right)
  ;;   (global-set-key (kbd "C-x 0") 'switch-window-then-delete)

  ;;   (global-set-key (kbd "C-x 4 d") 'switch-window-then-dired)
  ;;   (global-set-key (kbd "C-x 4 f") 'switch-window-then-find-file)
  ;;   (global-set-key (kbd "C-x 4 m") 'switch-window-then-compose-mail)
  ;;   (global-set-key (kbd "C-x 4 r") 'switch-window-then-find-file-read-only)

  ;;   (global-set-key (kbd "C-x 4 C-f") 'switch-window-then-find-file)
  ;;   (global-set-key (kbd "C-x 4 C-o") 'switch-window-then-display-buffer)

  ;;   (global-set-key (kbd "C-x 4 0") 'switch-window-then-kill-buffer))
#+END_SRC

** window splitting and following

   #+begin_src emacs-lisp
   (defun split-window-and-follow-vertically ()
   (interactive)
   (split-window-below)
   (balance-windows)
   (other-window 1))
   (global-set-key (kbd "C-x 2") 'split-window-and-follow-vertically)

   (defun split-window-and-follow-horizontally ()
   (interactive)
   (split-window-right)
   (balance-windows)
   (other-window 1))
   (global-set-key (kbd "C-x 3") 'split-window-and-follow-horizontally)
   #+end_src
   #+end_src
   
* buffers

** ibuffer
   

   some goodies: use =p= and =n= to move up and down

 #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x C-b") 'ibuffer)
 #+END_SRC

** expert mode

   do not ask for confirmation when killing buffers

#+BEGIN_SRC emacs-lisp
(setq ibuffer-expert t)
#+END_SRC

#+RESULTS:
: t
** kill current buffer and close the window

   #+begin_src emacs-lisp
	(defun kill-and-close-this-buffer ()
	  (interactive)
	  (kill-this-buffer)
	  (delete-window))

	(global-set-key (kbd "C-c k") 'kill-and-close-this-buffer)
   #+end_src

   #+RESULTS:
   : kill-and-close-this-buffer
** kill all buffers

   #+begin_src emacs-lisp
   (defun kill-all-buffers ()
   (interactive)
   (mapc 'kill-buffer (buffer-list)))
   (global-set-key (kbd "C-M-k") 'kill-all-buffers)
   #+end_src

   #+RESULTS:
   : kill-all-buffers
* projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1)
  )
#+END_SRC

* IDO 
** preparation

#+BEGIN_SRC emacs-lisp
(use-package ido
  :ensure t
  :config
  (setq ido-enable-flex-matching nil
	ido-create-new-buffer 'always
	ido-everywhere t)
  (add-to-list 'ido-ignore-files "\.bak")
  (add-to-list 'ido-ignore-files "\.log")
  (add-to-list 'ido-ignore-files ".venv")
  (add-to-list 'ido-ignore-files "__pycache__")
  (add-to-list 'ido-ignore-files "\.pytest_cache")
  (add-to-list 'ido-ignore-files "\.pkl")
  (ido-mode 1)
  )
#+END_SRC

#+RESULTS:
: t
** vertical IDO

   #+BEGIN_SRC  emacs-lisp
(use-package ido-vertical-mode
  :ensure t
  :requires ido
  :config
  (ido-vertical-mode 1)
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
  )   
   #+END_SRC

** smex
   
#+BEGIN_SRC emacs-lisp
(use-package smex
  :ensure t
  :init (smex-initialize)
  :bind
  ("M-x" . smex))
#+END_SRC

** buffer switching

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+END_SRC

#+RESULTS:
: ido-switch-buffer

* avy

#+BEGIN_SRC emacs-lisp
(use-package avy
:ensure t
:bind
("M-s" . avy-goto-char))
#+END_SRC

#+RESULTS:
: avy-goto-char

* TODO sublimity (make it work)
  
#+begin_src emacs-lisp
	  ;; (use-package sublimity
	  ;;   :ensure t
	  ;;   :config
	  ;;   (sublimity-mode 1))

	  ;; (use-package sublimity-scroll
	  ;;   :ensure t
	  ;;   :config
	  ;;   (sublimity-mode 1))
  ;; (require 'sublimity)
  ;; (require 'sublimity-scroll)
  ;; (sublimity-mode 1)
	;; (require 'sublimity-scroll)


#+end_src

#+RESULTS:
: t

why not showing in non-GUI Emacs?

#+RESULTS:
: t

* Python
** elpy
** ein

#+BEGIN_SRC emacs-lisp
(use-package ein
  :ensure t
  )

#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
  :init
  (defun activate-virtualenv ()
    "= pyenv-activate the current directory + '.venv'
in the future, the name of virtualenv should be specified as input
"
    (interactive)
    (message "activating virtualenv")
    (pyvenv-activate
     (expand-file-name
      ".venv" default-directory))
    (setq elpy-rpc-virtualenv-path 'current)  ; set path to Python interpreter correctly
    )
  ;; :commands (activate-virtualenv)
  ;; :bind (("C-c p a" . activate-virtualenv))
  :config
  (elpy-enable)
  (setq elpy-test-runner 'elpy-test-pytest-runner ; use pytest
	elpy-rpc-backend "jedi"
	elpy-modules (delq 'elpy-module-flymake elpy-modules)
	)
  (add-hook 'elpy-mode-hook 'flycheck-mode)
  )


#+END_SRC
** misc

   what do they do?

#+BEGIN_SRC emacs-lisp
(setq
 python-shell-interpreter "jupyter"
 python-shell-interpreter-args "console --simple-prompt"
 python-shell-prompt-detect-failure-warning nil)

#+END_SRC

* Other languages
** Matlab

need to install matlab-mode manually, 
package-install does not work for now

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'gnu/linux)
    (add-to-list 'load-path "/home/xiaoh1/code/matlab-emacs-src")
    (load-library "matlab-load"))

#+END_SRC

#+RESULTS:
  
** YAML

   #+BEGIN_SRC emacs-lisp   
   (use-package yaml-mode
   :ensure t
   :config
   (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
   )
   #+END_SRC
* yasnippet
** preparation

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (setq yas-snippet-dirs
	'("~/.emacs.d/snippets"
	  "~/.emacs.d/elpa/elpy-20220220.2059/"  ; might need to change
	  "~/.emacs.d/elpa/yasnippet-snippets-20220221.1234/snippets"  ; might need to change
	  ))
  (yas-global-mode 1)
  )
#+END_SRC

** add some off-the-shelf snippets by the community

   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet-snippets
   :ensure t
   )
   #+END_SRC
* config reload/edit

** edit
#+BEGIN_SRC emacs-lisp
(defun config-visit ()
"visit ~/.emacs.d/config.org"
(interactive)
(find-file "~/.emacs.d/config.org"))
(global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC

#+RESULTS:
: config-visit

** reload

#+BEGIN_SRC emacs-lisp
(defun config-reload ()
  "Reloads ~/.emacs.d/config.org at runtime"
  (interactive)
  (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
(global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

#+RESULTS:
: config-reload
* terminals


#+BEGIN_SRC emacs-lisp  
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
  (global-set-key (kbd "C-c t m") 'ansi-term)  ; why does not work? which key is super key?
#+END_SRC

#+RESULTS:
: ansi-term

* miscellenous
** show line/column number

#+begin_src emacs-lisp
(line-number-mode 1)
(column-number-mode 1)
#+end_src
** not sorted yet

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o")  'mode-line-other-buffer)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (when window-system
    (scroll-bar-mode -1))

					
  (setq split-width-threshold 1 )   ; horizontal split window

  (defalias 'yes-or-no-p 'y-or-n-p)



  (setq scroll-conservatively 100)


  (setq inhibit-startup-message t)

  (setq ring-bell-function 'ignore) ; no warning sound

  (when window-system
    (global-hl-line-mode t)
    (global-prettify-symbols-mode t)
    )

  (setq make-backup-files nil)
  (setq auto-save-default nil)


  (show-paren-mode 1)

#+END_SRC

#+RESULTS:
: t

* text maniputation
** line/region copying/deletion

#+begin_src emacs-lisp
(global-set-key (kbd "C-c c l") 'avy-copy-line)  ; copy a line
(global-set-key (kbd "C-c d l") 'avy-kill-whole-line)  ; kill&save a line
(global-set-key (kbd "C-c c r") 'avy-copy-region)  ; copy a region
(global-set-key (kbd "C-c d r") 'avy-kill-region)  ; kill&save a region
#+end_src

#+RESULTS:
: avy-kill-region
** subword

when pressing =M-f= or =M-b= in camel-case strings, e.g., ThisIsAWord, move /subword/.

#+begin_src emacs-lisp
(global-subword-mode 1)
#+end_src

#+RESULTS:

** electric pair mode

#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\{ . ?\})
			      ;; (?\' . ?\')  ; 
			      (?\" . ?\")
  ))
  (electric-pair-mode t)
#+end_src

#+RESULTS:
: t

** kill-whole-word and kill-whole-line

#+begin_src emacs-lisp
  (defun my-kill-whole-word ()
  (interactive)
  (backward-word)
  (kill-word 1)
  )
  ;; (defun my-kill-whole-line ()
  ;; (interactive)
  ;; (beginning-of-line)
  ;; (kill-line 1)
  ;; )

  (global-set-key (kbd "C-c w w") 'my-kill-whole-word)
  ;; (global-set-key (kbd "C-c w l") 'my-kill-whole-line)
#+end_src

#+RESULTS:
: my-kill-whole-word

** copy-whole-line

   #+begin_src emacs-lisp
     (defun copy-whole-line ()
       (interactive)
       (save-excursion
	 (kill-new
	  (buffer-substring
	   (point-at-bol)
	   (point-at-eol))))
       )
     (global-set-key (kbd "C-c w l") 'copy-whole-line)
   #+end_src

   #+RESULTS:
   : copy-whole-line

** hungry-delete

#+begin_src emacs-lisp
(use-package hungry-delete
:ensure t
:config (global-hungry-delete-mode))
#+end_src

#+RESULTS:
: t

* mode line
** spaceline

#+begin_src emacs-lisp
(use-package spaceline
:ensure t
:config
(require 'spaceline-config)
(setq powerline-default-separator (quote arrow))
(spaceline-spacemacs-theme))
#+end_src

** diminish

#+begin_src emacs-lisp
  (use-package diminish
  :ensure t
  :init 
  (diminish 'hungry-delete-mode)
  (diminish 'which-key-mode)
  (diminish 'rainbow-mode)
  (diminish 'beacon-mode)
  (diminish 'subword-mode)
  )
#+End_src

#+RESULTS:

* dmenu

run a command in shell

#+begin_src emacs-lisp
(use-package dmenu
    :ensure t
    :bind
    ("C-c d m" . 'dmenu))
#+end_src

#+RESULTS:
: dmenu
* symon

#+begin_src emacs-lisp

  (use-package symon
    :ensure t
    :bind
    ("C-c s" . symon-mode))
#+end_src

#+RESULTS:
: symon-mode

* searching
  ** text search
  #+begin_src  emacs-lisp
	(use-package swiper
	  :ensure t
	  :bind
	  ("C-s" . swiper))
  #+end_src

  #+RESULTS:
  : swiper



