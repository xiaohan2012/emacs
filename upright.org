* copy&paste

#+begin_src emacs-lisp
  (defun upright/copy-aws-id ()
    (interactive)
    (kill-new "347938125022")
    (message "copid '347938125022'")
    )

  (defun upright/copy-aws-name ()
    (interactive)
    (kill-new "admin_role")
    (message "copid 'admin_role'")
    )  

#+end_src

#+RESULTS:
: upright/copy-aws-name

* dev
** utility function
*** buffer

#+begin_src emacs-lisp
  (defun get-or-create-named-buffer (name)
    "return a buffer with 'name', create it if it does not exist "
    (let ((buffer-or-nil (get-buffer name)))
      (if buffer-or-nil
	  buffer-or-nil
	(generate-new-buffer name)	
	)
      )
    )
#+end_src

#+RESULTS:
: get-or-create-named-buffer

*** shell 
#+begin_src emacs-lisp
  (defun my/async-shell-command (command buffer-name)
    "execute command async and display the output and error message in a buffer named buffer-name"
    (let* ((output-buffer (get-or-create-named-buffer buffer-name)))
      (async-shell-command command output-buffer output-buffer)
      ))  

  ;; (my/async-shell-command "ls" "*ls-buffer*")

  (defun upright/run-yarn-in-buffer (buffer-name yarn-comand &optional env)
    (let* ((env (or env ""))
           (yarn-path "/Users/hanxiao/.nvm/versions/node/v18.16.1/bin/yarn"))
      (when (get-buffer buffer-name)
        (kill-buffer buffer-name))
      (my/async-shell-command
       (format "source ~/.zshrc; cd ~/code/upright; %s %s %s" env yarn-path yarn-comand)
       buffer-name)
      )  
    )  
#+end_src

#+RESULTS:
: upright/run-yarn-in-buffer

** tunneling
*** ES tunneling
#+begin_src emacs-lisp
  (defun upright/setup-ES-BERT-tunneling ()
    "tunnel to ES and BERT service"
    (interactive)
    (let* ((bert-buffer "*upright/bert-tunnel*")
           (es-buffer "*upright/elastic-search-tunnel*"))
      (when (get-buffer bert-buffer)
        (kill-buffer bert-buffer))
      (my/async-shell-command "ssh -o 'ServerAliveInterval 60' -L 3004:localhost:3004 upright@beauty.uprightproject.com -p 22" bert-buffer)

      (when (get-buffer es-buffer)
        (kill-buffer es-buffer))
      (my/async-shell-command "ssh -o 'ServerAliveInterval 60' -L 9200:es-core-23:9200 upright@manager.uprightproject.com -p 2222" es-buffer)
    )
    )
#+end_src

#+RESULTS:
: upright/setup-ES-BERT-tunneling

*** db tunning

#+begin_src emacs-lisp
  (defun upright/setup-val-db-tunneling ()
    "tunnel into validation server DB"
    (interactive)
  (let* ((val-db-buffer "*upright/val-db-tunneling*")
         )
    (when (get-buffer val-db-buffer)
      (kill-buffer val-db-buffer))
    (my/async-shell-command "ssh -N -p 2222 upright@validation-manager.uprightproject.com -L 127.0.0.1:5222:192.168.10.1:5432" val-db-buffer)
    )
  )

  (defun upright/setup-stg-db-tunneling ()
    "tunnel into staging server DB"
    (interactive)
  (let* ((buffer "*upright/stg-db-tunneling*")
         )
    (when (get-buffer buffer)
      (kill-buffer buffer))
    (my/async-shell-command "ssh -L 5433:pgbouncer-work:5432 upright@staging-manager.uprightproject.com -p 2222" buffer)
    )
  )

    (defun upright/setup-prd-db-tunneling ()
      "tunnel into production server DB"
      (interactive)
    (let* ((buffer "*upright/prd-db-tunneling*")
           )
      (when (get-buffer buffer)
        (kill-buffer buffer))
      (my/async-shell-command "ssh -L 5434:pgbouncer-work:5432 upright@manager.uprightproject.com -p 2222" buffer)
      )
    )  
#+end_src

#+RESULTS:
: upright/setup-prd-db-tunneling

*** swarmpit tunneling

#+begin_src emacs-lisp
  (defun upright/setup-val-swarmpit-tunneling ()
    "tunnel into swarmpit app"
    (interactive)
  (let* ((buffer "*upright/val-swarmpit-tunneling*")
         )
    (when (get-buffer buffer)
      (kill-buffer buffer))
    (my/async-shell-command "ssh -N -p 2222 upright@validation-manager.uprightproject.com -L 127.0.0.1:8085:swarmpit-app:8080" buffer)
    )
  )
#+end_src

#+RESULTS:
: upright/setup-val-swarmpit-tunneling

** run apps locally

#+begin_src emacs-lisp
  (defun upright/run-app ()
    "run apps"
    (interactive)
    (let* ((upwork-buffer-master "*upright/upwork-server-master*")
           (upwork-buffer-slave "*upright/upwork-server-slave*")
           (api-buffer "*upright/api-server*")
           (web-buffer "*upright/web-server*")
           (yarn-path "yarn")
           )

      (upright/run-yarn-in-buffer upwork-buffer-master "start-upwork-dev" "UPWORK_MODE=master")
      (upright/run-yarn-in-buffer upwork-buffer-slave "start-upwork-dev" "UPWORK_MODE=slave")
      (upright/run-yarn-in-buffer api-buffer "start-server")
      (upright/run-yarn-in-buffer web-buffer "start")
      )
    )
#+end_src

#+RESULTS:
: upright/run-app
** yarn utilities: typecheck, linting, etc

#+begin_src emacs-lisp
  (defun upright/typecheck ()
    "run typecheck"
    (interactive)
    (let* (;; (lint-buffer "*upright/lint*")
           (buffer "*upright/typecheck*")
           )

      ;; (upright/run-yarn-in-buffer lint-buffer "lint-changed-since-master")
      (upright/run-yarn-in-buffer buffer "typecheck")
      )
    )

  (defun upright/lint ()
    "run lint"
    (interactive)
    (let* (;; (lint-buffer "*upright/lint*")
           (buffer "*upright/lint*")
           )

      ;; (upright/run-yarn-in-buffer lint-buffer "lint-changed-since-master")
      (upright/run-yarn-in-buffer buffer "lint-changed-since-master")
      )
    )

  (defun upright/prettier-fix ()
    "run lint"
    (interactive)
    (let* (;; (lint-buffer "*upright/lint*")
           (buffer "*upright/prettier-fix*")
           )

      ;; (upright/run-yarn-in-buffer lint-buffer "lint-changed-since-master")
      (upright/run-yarn-in-buffer buffer "prettier-fix-changed-since-master")
      )
    )  

#+end_src

#+RESULTS:
: upright/prettier-fix
** logs

#+begin_src emacs-lisp

  (defun upright/setup-log-tunneling ()
  "tunnel to log-related services"
  (interactive)
  (let* ((staging-buffer "*upright/staging-log*")
         (prod-buffer "*upright/prod-log*")
         )
    (when (get-buffer staging-buffer)
      (kill-buffer staging-buffer))
    ;; -o 'ServerAliveInterval 60'
    (my/async-shell-command "ssh -L 4444:kibana-apm:5601 upright@staging-manager.uprightproject.com -p 2222" staging-buffer)
  
    (when (get-buffer prod-buffer)
      (kill-buffer prod-buffer))
    ;; -o 'ServerAliveInterval 60'
    (my/async-shell-command "ssh -L 5555:kibana-apm:5601 upright@manager.uprightproject.com -p 2222" prod-buffer)
  )
  )
#+end_src

#+RESULTS:
: upright/setup-log-tunneling

** pai

#+begin_src emacs-lisp
  (defun upright/ghg-datagen ()
  "data generation for GHG algo "
  (interactive)
  (let* (;; (lint-buffer "*upright/lint*")
         (trainig-data-buffer "*upright/ghg-datagen-training*")
         (product-market-size-buffer "*upright/ghg-datagen-market-size*")
         (mixin-base-buffer "*upright/ghg-datagen-minxin-base*")
         (hierarchy-buffer "*upright/ghg-datagen-product-hierarchy*")
         )
    (upright/run-yarn-in-buffer trainig-data-buffer "run tsn-main  --max-old-space-size=16000 src/scripts/tools/pai/create-training-data.ts")
    (upright/run-yarn-in-buffer product-market-size-buffer "run tsn-main src/scripts/tools/pai/export-product-market-share.ts")
    (upright/run-yarn-in-buffer mixin-base-buffer "run tsn-main src/scripts/tools/pai/extract-base-products-for-mixin.ts")
    (upright/run-yarn-in-buffer hierarchy-buffer "run tsn-main src/scripts/tools/product-taxonomy/export-hierarchy.ts")
    )
  )
#+end_src

#+RESULTS:
: upright/ghg-datagen

** adhoc commands
*** CSRD
#+begin_src emacs-lisp

    (defun upright/csrd-multi-eval ()
    "run csrd evaluation on multiple statements"
    (interactive)
    (let* (;; (lint-buffer "*upright/lint*")
           (buffer "*upright/csrd-multi-statements-evaluation*")
           )

      ;; (upright/run-yarn-in-buffer lint-buffer "lint-changed-since-master")
      (upright/run-yarn-in-buffer buffer "run tsn-main src/scripts/tools/gpt-tools/isc-poc/extraction/run/test-csrd-evalution-for-multiple-statements.ts")
      )
    )
#+end_src

#+RESULTS:
: upright/csrd-multi-eval

*** notebook
#+begin_src emacs-lisp

  (defun upright/start-ghg-jupyter ()
    "start jupyter notebook for ghg project"
    (interactive)
    (let* ( (buffer "*upright/jupyter-ghg*")
            )
      (when (get-buffer buffer)
        (kill-buffer buffer))      
      (my/async-shell-command "source ~/.zshrc; cd /Users/hanxiao/code/upright-sagemaker-inference-api/src/predictors/pai-ghg-emissions; source .venv/bin/activate; jupyter-lab" buffer)
      )
    )


#+end_src

#+RESULTS:
: upright/start-ghg-jupyter

#+begin_src emacs-lisp
  (defun upright/start-llm-jupyter ()
    "start jupyter notebook for llm report annotation"
    (interactive)
    (let* ( (buffer "*upright/jupyter-llm-report-annotation*")
            )
      (when (get-buffer buffer)
        (kill-buffer buffer))      
      (my/async-shell-command "source ~/.zshrc; cd /Users/hanxiao/code/llm-based-annotation; source .venv/bin/activate; jupyter lab" buffer)
      )
    )


#+end_src

#+RESULTS:
: upright/start-llm-jupyter

*** ghg deployment

#+begin_src emacs-lisp

    (defun upright/compute-company-variant-results ()
    "run src/scripts/one-off/compute-company-variant-results.ts"
    (interactive)
    (let* (;; (lint-buffer "*upright/lint*")
           (buffer "*upright/compute-company-variant-results*")
           )

      ;; (upright/run-yarn-in-buffer lint-buffer "lint-changed-since-master")
      (upright/run-yarn-in-buffer buffer "run tsn-main src/scripts/one-off/compute-company-variant-results.ts")
      )
    )
#+end_src

#+RESULTS:
: upright/compute-company-variant-results

** llm-based annotation
*** report opening
#+begin_src emacs-lisp

  (defun upright/open-company-report ()
    "open a report of a given company"
    (interactive)
    (let* ((default-directory "~/code/llm-report-annotation/data/ghg1-reports")
           (all-paths (directory-files default-directory t))
           ;; use pdf only
           (candidate-file-paths  (-filter (lambda (str) (string-match-p "pdf" str)) all-paths))
           ;; extract file names
           (candidate-file-names  (mapcar (lambda (path) (file-name-sans-extension (file-name-nondirectory path))) candidate-file-paths))
           (company-id (completing-read "Enter company id: "
                                        candidate-file-names)))
      (find-file (format "%s/%s.pdf" default-directory company-id))))

  (defun upright/open-company-pages ()
    "open the split pages of a given company"
    (interactive)
    (let* (
           (default-directory "~/code/llm-report-annotation/data/ghg1-pages-dpi100")
             (all-paths (directory-files default-directory t))
             ;; extract file names
             (candidate-file-names  (mapcar (lambda (path) (file-name-sans-extension (file-name-nondirectory path))) all-paths))
           (company-id (completing-read "Enter company id: " (-filter (lambda (str) (> (length str) 3)) candidate-file-names))))
      (find-file (format "%s/%s/page_0.png" default-directory company-id))))

  (defun upright/open-company-relevant-page ()
    "open the relevant page of a given company"
    (interactive)
    (let* (
           (default-directory "~/code/llm-report-annotation/data/ghg1-relevant-page-only-dpi500/")
             (all-paths (directory-files default-directory t))
             ;; extract file names
             (candidate-file-names  (mapcar (lambda (path) (file-name-sans-extension (file-name-nondirectory path))) all-paths))
           (company-id (completing-read "Enter company id: " (-filter (lambda (str) (> (length str) 3)) candidate-file-names))))
      (find-file (format "%s/%s/page_0.png" default-directory company-id))))    
#+end_src

#+RESULTS:
: upright/open-company-relevant-page



* Environment variables

#+begin_src emacs-lisp
  (setenv "AWS_PROFILE" "upright")
  (setenv "UPRIGHT_TOKEN" "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6OTg1MSwic2NvcGUiOiJBUEkiLCJpYXQiOjE3NDAxMjU5NDQsImV4cCI6NDg2NDMyODM0NH0.sWbzhvWHHKXZglC6G9mzVKNEG2A3n48eW9queu7Dzos")
#+end_src

#+RESULTS:
: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6OTg1MSwic2NvcGUiOiJBUEkiLCJpYXQiOjE3NDAxMjU5NDQsImV4cCI6NDg2NDMyODM0NH0.sWbzhvWHHKXZglC6G9mzVKNEG2A3n48eW9queu7Dzos

* snippets

#+begin_src emacs-lisp
    (defun python/copy-common-imports ()
      (interactive)
      (kill-new "
  import numpy as np
  import pandas as pd
  import seaborn as sns

  from matplotlib import pyplot as plt
  from pathlib import Path
  ")
      )  
#+end_src

#+RESULTS:
: python/copy-common-imports

